<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2018-02-05T22:48:34+00:00</updated><id>http://localhost:4000/</id><title type="html">Greg Beech</title><subtitle>Blog and CV of Greg Beech, Principal Engineer @ Deliveroo
</subtitle><author><name>Greg Beech</name><email>greg@gregbeech.com</email></author><entry><title type="html">The problem with ETags in RESTful APIs</title><link href="http://localhost:4000/2015/04/04/the-problem-with-etags-in-restful-apis/" rel="alternate" type="text/html" title="The problem with ETags in RESTful APIs" /><published>2015-04-04T00:00:00+01:00</published><updated>2015-04-04T00:00:00+01:00</updated><id>http://localhost:4000/2015/04/04/the-problem-with-etags-in-restful-apis</id><content type="html" xml:base="http://localhost:4000/2015/04/04/the-problem-with-etags-in-restful-apis/">&lt;p&gt;Consider a collection of two addresses. #1 was updated at 11:20 and #2 was updated at 11:45. The last modified date of the collection can be the latest time that any individual address was modified. To make notation simpler I’ll just include the time for the last modified date, and the etag will be the time as they’re often derived from timestamps (you could hash the state or any other mechanism too; it won’t alter this discussion).&lt;/p&gt;

&lt;p&gt;These are the ways you could fetch the addresses, with the expected &lt;code class=&quot;highlighter-rouge&quot;&gt;Last-Modified&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;ETag&lt;/code&gt; headers:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /addresses   -&amp;gt; Last-Modified: 11:45, ETag: &quot;1145&quot;
GET /addresses/1 -&amp;gt; Last-Modified: 11:20, ETag: &quot;1120&quot;
GET /addresses/2 -&amp;gt; Last-Modified: 11:45, ETag: &quot;1145&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;No surprises there. But now let’s try some updates using &lt;code class=&quot;highlighter-rouge&quot;&gt;If-Match&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;If-Unmodified-Since&lt;/code&gt; conditional request headers which facilitate optimistic concurrency, particularly useful in the modern world where state is heavily cached and users often have multiple devices. Assume we retrieved the list of addresses using &lt;code class=&quot;highlighter-rouge&quot;&gt;GET /addresses&lt;/code&gt; and now want to update them.&lt;/p&gt;

&lt;p&gt;Using modification dates everything works as we’d expect:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PATCH /addresses/1, If-Unmodified-Since: 11:45 -&amp;gt; 200 OK
PATCH /addresses/2, If-Unmodified-Since: 11:45 -&amp;gt; 200 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In either case the address has not been modified since we retrieved it so the condition is true. However if we use etags for the condition the results are a bit more surprising:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PATCH /addresses/1, If-Match: &quot;1145&quot; -&amp;gt; 412 Precondition Failed
PATCH /addresses/2, If-Match: &quot;1145&quot; -&amp;gt; 200 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because etags use an equality comparison function rather than a range-based comparison like modification dates, the etag &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;1145&quot;&lt;/code&gt; for address #1 does not match the expected &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;1120&quot;&lt;/code&gt;, and so the address cannot be updated.&lt;/p&gt;

&lt;p&gt;Let’s try a different approach. What if we made the etag the same for &lt;em&gt;all&lt;/em&gt; address resources, so they’d all have the etag of the latest modified address?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /addresses   -&amp;gt; Last-Modified: 11:45, ETag: &quot;1145&quot;
GET /addresses/1 -&amp;gt; Last-Modified: 11:45, ETag: &quot;1145&quot;
GET /addresses/2 -&amp;gt; Last-Modified: 11:45, ETag: &quot;1145&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That initially seems like a good solution as now it seems like both our &lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; requests above should just work. But the results might surprise you:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PATCH /addresses/1, If-Match: &quot;1145&quot; -&amp;gt; 200 OK
PATCH /addresses/2, If-Match: &quot;1145&quot; -&amp;gt; 412 Precondition Failed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately now we’ve linked our resources to each other, so if we make an update to address #1 at 11:50 then the etag for all of the address resources will change to &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;1150&quot;&lt;/code&gt; meaning that the second &lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; will fail because the previously ‘known’ etag for that resource has changed underneath us, even though the resource itself hasn’t actually changed!&lt;/p&gt;

&lt;p&gt;Bugger.&lt;/p&gt;

&lt;p&gt;So why do we run into this mess? Does this mean etags are fundamentally broken? No, it’s because our RESTful API isn’t &lt;em&gt;really&lt;/em&gt; RESTful.&lt;/p&gt;

&lt;p&gt;In true REST you cannot return lists of resources (i.e. you cannot return a list of addresses) you can only return a list of &lt;em&gt;links&lt;/em&gt; to addresses because the resource state must be retrievable from exactly one location. To fetch a list of addresses you’d have to make a request to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/addresses&lt;/code&gt; endpoint to get the links, and then to each of the individual links it returned (&lt;code class=&quot;highlighter-rouge&quot;&gt;/addresses/1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/addresses/2&lt;/code&gt;) to get the state – in other words true REST has the N+1 selects ‘antipattern’ codified into it.&lt;/p&gt;

&lt;p&gt;Under this situation etags work fine because you only have one canonical location for the resource state and thus the etag for the address list changes only when addresses are added or removed but not when an address itself changes, so the etags are independent rather than co-dependent. However, we don’t tend to do things this way because N+1 requests isn’t great for performance, and the compromises we make for performance break the assumptions that etags are based on.&lt;/p&gt;

&lt;p&gt;However, you’ll notice that even when you break these assumptions, the range comparisons afforded by modification dates still work as you’d intuitively expect. There’s a &lt;em&gt;bit&lt;/em&gt; of trickery on the client-side who has to know that it’s valid to cascade a modification date from a collection to an individual resource, which is strictly a violation of the HTTP rules, but it’s one that feels logical and reasonable.&lt;/p&gt;

&lt;p&gt;You could most likely do some trickery with etags on the client-side too, by shuffling etags between resources (e.g. taking the response etag from an address update and applying to the collection) but I can’t easily come up with a set of rules for doing this that would make sense in all cases, and I suspect that attempting to do this would lead to a significant number of hard-to-find bugs. Just use modification dates.&lt;/p&gt;

&lt;h2 id=&quot;appendix&quot;&gt;Appendix&lt;/h2&gt;

&lt;p&gt;If you really want to be sure that modification dates will work, here’s a fairly exhaustive set of scenarios using them. The starting point for each scenario is that you got a list of addresses. Each scenario is independent – i.e. they all start from this starting point – but multiple calls in each scenario are considered to be in sequence.&lt;/p&gt;

&lt;p&gt;The one case you may notice where things aren’t quite right is in the case where another client has deleted and address and then you get &lt;code class=&quot;highlighter-rouge&quot;&gt;412 Precondition Failed&lt;/code&gt; when trying to add an address because the collection has changed, even though there can’t possibly be a conflict between those two actions. It’s not the end of the world. If it really bothers you, go and play with &lt;a href=&quot;http://en.wikipedia.org/wiki/Conflict-free_replicated_data_type&quot;&gt;CRDTs&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;if-nothing-has-changed&quot;&gt;If nothing has changed&lt;/h3&gt;

&lt;p&gt;“I want to get the latest addresses”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /addresses, If-Modified-Since: 11:45 -&amp;gt; 304 Not Modified
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“I want to get a particular address”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /addresses/1, If-Modified-Since: 11:45 -&amp;gt; 304 Not Modified
GET /addresses/2, If-Modified-Since: 11:45 -&amp;gt; 304 Not Modified
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“I want to add an address”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /addresses, If-Unmodified-Since: 11:45 -&amp;gt; 201 Created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“I want to update my addresses”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PATCH /addresses/1, If-Unmodified-Since: 11:45 -&amp;gt; 200 OK
PATCH /addresses/2, If-Unmodified-Since: 11:45 -&amp;gt; 200 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“I want to delete my addresses”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DELETE /addresses/1, If-Unmodified-Since: 11:45 -&amp;gt; 200 OK
DELETE /addresses/2, If-Unmodified-Since: 11:45 -&amp;gt; 200 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;if-another-client-added-an-address&quot;&gt;If another client added an address&lt;/h3&gt;

&lt;p&gt;“I want to get the latest addresses”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /addresses, If-Modified-Since: 11:45 -&amp;gt; 200 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“I want to get a particular address”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /addresses/1, If-Modified-Since: 11:45 -&amp;gt; 304 Not Modified
GET /addresses/2, If-Modified-Since: 11:45 -&amp;gt; 304 Not Modified
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“I want to add an address”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /addresses, If-Unmodified-Since: 11:45 -&amp;gt; 412 Precondition Failed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“I want to update my addresses”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PATCH /addresses/1, If-Unmodified-Since: 11:45 -&amp;gt; 200 OK
PATCH /addresses/2, If-Unmodified-Since: 11:45 -&amp;gt; 200 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“I want to delete my addresses”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DELETE /addresses/1, If-Unmodified-Since: 11:45 -&amp;gt; 200 OK
DELETE /addresses/2, If-Unmodified-Since: 11:45 -&amp;gt; 200 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;if-another-client-updated-address-1&quot;&gt;If another client updated address #1&lt;/h3&gt;

&lt;p&gt;“I want to get the latest addresses”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /addresses, If-Modified-Since: 11:45 -&amp;gt; 200 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“I want to get a particular address”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /addresses/1, If-Modified-Since: 11:45 -&amp;gt; 200 OK
GET /addresses/2, If-Modified-Since: 11:45 -&amp;gt; 304 Not Modified
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“I want to add an address”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /addresses, If-Unmodified-Since: 11:45 -&amp;gt; 412 Precondition Failed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“I want to update my addresses”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PATCH /addresses/1, If-Unmodified-Since: 11:45 -&amp;gt; 412 Precondition Failed
PATCH /addresses/2, If-Unmodified-Since: 11:45 -&amp;gt; 200 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“I want to delete my addresses”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DELETE /addresses/1, If-Unmodified-Since: 11:45 -&amp;gt; 412 Precondition Failed
DELETE /addresses/2, If-Unmodified-Since: 11:45 -&amp;gt; 200 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;if-another-client-deleted-address-1&quot;&gt;If another client deleted address #1&lt;/h3&gt;

&lt;p&gt;“I want to get the latest addresses”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /addresses, If-Modified-Since: 11:45 -&amp;gt; 200 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“I want to get a particular address”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /addresses/1, If-Modified-Since: 11:45 -&amp;gt; 410 Gone
GET /addresses/2, If-Modified-Since: 11:45 -&amp;gt; 304 Not Modified
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“I want to add an address”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /addresses, If-Unmodified-Since: 11:45 -&amp;gt; 412 Precondition Failed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“I want to update my addresses”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PATCH /addresses/1, If-Unmodified-Since: 11:45 -&amp;gt; 410 Gone
PATCH /addresses/2, If-Unmodified-Since: 11:45 -&amp;gt; 200 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“I want to delete my addresses”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DELETE /addresses/1, If-Unmodified-Since: 11:45 -&amp;gt; 410 Gone
DELETE /addresses/2, If-Unmodified-Since: 11:45 -&amp;gt; 200 OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>gregbeech</name></author><category term="http" /><category term="caching" /><category term="concurrency" /><summary type="html">Consider a collection of two addresses. #1 was updated at 11:20 and #2 was updated at 11:45. The last modified date of the collection can be the latest time that any individual address was modified. To make notation simpler I’ll just include the time for the last modified date, and the etag will be the time as they’re often derived from timestamps (you could hash the state or any other mechanism too; it won’t alter this discussion).</summary></entry><entry><title type="html">Reducing sensitive information leakage</title><link href="http://localhost:4000/2015/01/28/reducing-sensitive-information-leakage/" rel="alternate" type="text/html" title="Reducing sensitive information leakage" /><published>2015-01-28T00:00:00+00:00</published><updated>2015-01-28T00:00:00+00:00</updated><id>http://localhost:4000/2015/01/28/reducing-sensitive-information-leakage</id><content type="html" xml:base="http://localhost:4000/2015/01/28/reducing-sensitive-information-leakage/">&lt;p&gt;Most good developers take measures to protect sensitive information, and in particular personally identifiable information (PII), when building software. Some typical basic measures are putting user information in separate databases and restricting access to them, or storing credit card details with a specialist provider rather than in your own infrastructure.&lt;/p&gt;

&lt;p&gt;However, even in a well designed system there are many channels through which information can leak. For example given the following class:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s all too easy to write something like the following:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to process request for $user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// &amp;gt; Failed to process request for User(47d429adce, johndoe@example.org, John Doe)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And, whoops, you’ve accidentally dumped their email address and full name into your logs, which if you’re doing things right are all collected and searchable in something like Graylog or Logstash. Even if you only keep logs for a relatively short period such as 30 days, this is still a fairly major leak.&lt;/p&gt;

&lt;p&gt;It’s pretty hard to prevent this even with careful developers and good code reviews because it’s just so easy to leak sensitive information, and while it’s obvious that a &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; class is going to contain that kind of thing, other classes may be rather less obvious.&lt;/p&gt;

&lt;p&gt;A good way to solve this, inspired by &lt;a href=&quot;http://en.wikipedia.org/wiki/Information_flow_%28information_theory%29&quot;&gt;information flow theory&lt;/a&gt;, is to mark the fields as being sensitive and then give them safe-by-default behaviour when dumped, e.g.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sensitive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;******&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sensitive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forAny&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sensitive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sensitive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sensitive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sensitive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to process request for $user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// &amp;gt; Failed to process request for User(47d429adce, ******, ******)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Much better.&lt;/p&gt;

&lt;p&gt;There are a couple of reasons you’re better off using a type rather than, say, an &lt;code class=&quot;highlighter-rouge&quot;&gt;@sensitive&lt;/code&gt; annotation. The most important one &lt;em&gt;is&lt;/em&gt; the safe-by-default behaviour because with a specialised type like this if the recipient doesn’t know how to process it (e.g. third party logging libraries) then it’ll print the masked value, unlike annotations which are ignored by recipients that don’t understand them.&lt;/p&gt;

&lt;p&gt;The other is that the sensitivity of a piece of data is an intrinsic part of the model. Much like an &lt;code class=&quot;highlighter-rouge&quot;&gt;Option[String]&lt;/code&gt; declares that a string is optional and cannot be passed as a regular &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; argument directly, a &lt;code class=&quot;highlighter-rouge&quot;&gt;Sensitive[String]&lt;/code&gt; also requires the developer to stop and think for a second before deciding whether it’s appropriate to remove the sensitive marker. In an ideal world, this marker would be flowed all the way through to your application boundaries.&lt;/p&gt;

&lt;p&gt;We can improve this further using the Scala idiom of creating wrapper classes for values that are likely to be passed around independently (e.g. instead of having the &lt;code class=&quot;highlighter-rouge&quot;&gt;email&lt;/code&gt; property be a &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; we would make it an &lt;code class=&quot;highlighter-rouge&quot;&gt;Email&lt;/code&gt;) which would make it a compile-time error to pass a name to a method expecting an email, and vice versa. By baking the sensitive marker into these we get a cleaner, more expressive model with better log output because we can see what information has been masked.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnyVal&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sensitive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnyVal&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Sensitive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnyVal&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to process request for $user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// &amp;gt; Failed to process request for User(UserId(47d429adce), Email(******), Name(******))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This works pretty well within an application, but quite often you’re going to want to send the sensitive information to other parties using some kind of open protocol such as HTTP or AMQP which doesn’t support this kind of object model. Because you’ve got the sensitive type in your object model it’s relatively easy to hook into frameworks such as &lt;a href=&quot;https://github.com/json4s/json4s&quot;&gt;json4s&lt;/a&gt; and provide custom serialization for these fields, giving you a number of options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Plain text - Unwrap the sensitive value when you serialize and wrap it when you deserialize, transmitting the value in plain text. This is useful when you’re communicating directly with the intended recipient over a secure channel and so don’t have to worry about things like interception, for example in a web API.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Symmetric encryption - Encrypt the sensitive value when you serialize and decrypt it when you deserialize, transmitting the value as an encrypted string. This is useful when you’re broadcasting the message to trusted recipients who can share a symmetric key but are concerned about things like messages being logged or routed to dead-letter queues, for example in a private message bus.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Asymmetric encryption - There almost certainly &lt;em&gt;are&lt;/em&gt; use cases for asymmetric encryption at a field level in messages, but there are a number of ways to do this depending on the problem you’re trying to solve, and you’d almost certainly want to use it in combination with message-level encryption and/or digital signatures. As such, I’m going to assume that if you’re going this route you know enough about what you’re doing and why.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am not a lawyer so it’s unclear to me whether symmetrically encrypting data on a message bus is sufficient for the Data Protection Act &lt;em&gt;et al.&lt;/em&gt; rules on keeping personal data (as if any of the data does get logged then it is in theory decryptable, even if nobody except the most trusted operators would have the key). However, it’s a pretty good start and a worthwhile endeavour given how simply it can be plugged in.&lt;/p&gt;

&lt;p&gt;In any case – it’s trivial to start marking your data as sensitive, and trivial to process it when it is. It’s not a panacea but it’ll cure many of your problems with inadvertent data leakage, and allow you to take action based on the sensitivity of data in future. There’s really no good reason not to do it.&lt;/p&gt;</content><author><name>gregbeech</name></author><category term="security" /><category term="scala" /><category term="pii" /><summary type="html">Most good developers take measures to protect sensitive information, and in particular personally identifiable information (PII), when building software. Some typical basic measures are putting user information in separate databases and restricting access to them, or storing credit card details with a specialist provider rather than in your own infrastructure.</summary></entry><entry><title type="html">RESTful API design guidelines</title><link href="http://localhost:4000/2015/01/28/restful-api-design-guidelines/" rel="alternate" type="text/html" title="RESTful API design guidelines" /><published>2015-01-28T00:00:00+00:00</published><updated>2015-01-28T00:00:00+00:00</updated><id>http://localhost:4000/2015/01/28/restful-api-design-guidelines</id><content type="html" xml:base="http://localhost:4000/2015/01/28/restful-api-design-guidelines/">&lt;p&gt;We spend a lot of time designing RESTful APIs and discussing different patterns and paradigms. Contrary to popular opinion designing RESTful APIs is actually pretty difficult, so I thought I’d share some of the decisions we’ve made. You might not agree with everything, but I’ve included some discussion around the points so you can at least see why we think it’s the right thing to do.&lt;/p&gt;

&lt;h2 id=&quot;resource-orientation&quot;&gt;Resource orientation&lt;/h2&gt;

&lt;p&gt;I’m going to start with this because it’s the most important section. It includes details that are covered in more depth in the rest of the post, so if there’s anything you’re not sure about don’t worry; it’ll be covered later.&lt;/p&gt;

&lt;p&gt;One of the key features of RESTful APIs is that they are resource-oriented. That is, you deal with resources rather than RPC-style requests and responses. The basic rules are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;URLs are nouns identifying resources&lt;/li&gt;
  &lt;li&gt;Verbs indicate the actions that are taken on the resource&lt;/li&gt;
  &lt;li&gt;URLs accept and return payloads of the type of resource they identify&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This last point is critical. You should not have &lt;code class=&quot;highlighter-rouge&quot;&gt;XxxRequest&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;XxxResponse&lt;/code&gt; entities in REST as these are RPC concepts; you should only deal in entities.&lt;/p&gt;

&lt;p&gt;As an example, here’s the outline of a simple bookmarks API:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /my/bookmarks&lt;/code&gt; creates a bookmark and takes a &lt;code class=&quot;highlighter-rouge&quot;&gt;Bookmark&lt;/code&gt; resource in the entity-body. If it returns an entity-body it must return a complete &lt;code class=&quot;highlighter-rouge&quot;&gt;Bookmark&lt;/code&gt; resource.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /my/bookmarks&lt;/code&gt; gets a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;Bookmark&lt;/code&gt; resources.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /my/bookmarks/:id&lt;/code&gt; gets an individual &lt;code class=&quot;highlighter-rouge&quot;&gt;Bookmark&lt;/code&gt; resource.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH /my/bookmarks/:id&lt;/code&gt; updates a bookmark and takes a &lt;code class=&quot;highlighter-rouge&quot;&gt;Bookmark&lt;/code&gt; resource in then entity-body. If it returns an entity-body it must return a complete &lt;code class=&quot;highlighter-rouge&quot;&gt;Bookmark&lt;/code&gt; resource.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE /my/bookmarks/:id&lt;/code&gt; deletes a bookmark and returns no entity-body.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that the only resource in the entire API is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Bookmark&lt;/code&gt;, and this is the only thing found in any entity-body. The exception to this is in error cases (i.e. status codes &amp;gt;= 400) where it is more appropriate to return an &lt;code class=&quot;highlighter-rouge&quot;&gt;Error&lt;/code&gt; resource in the body, if any body is returned.&lt;/p&gt;

&lt;p&gt;Typically some of the fields on a bookmark will be read-only (set by the server) for example the resource identifier and creation date, so these would not be sent by the client on creation. Often other fields which may be set on creation will be read-only after the resource is created; in the example above it might not be valid to change the bookmark type after creation.&lt;/p&gt;

&lt;p&gt;When writing code to implement this, it can be tricky to use a single class to handle these three cases, so it might be appropriate to define three &lt;em&gt;internal&lt;/em&gt; representations which map to a single Bookmark resource externally:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;class NewBookmark&lt;/code&gt; represents a bookmark being created&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;class Bookmark&lt;/code&gt; represents a full, created, bookmark&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;class BookmarkUpdates&lt;/code&gt; represents updates to a bookmark&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, this is an implementation detail and from the point of view of the API there is one single resource type, &lt;code class=&quot;highlighter-rouge&quot;&gt;Bookmark&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;verbs&quot;&gt;Verbs&lt;/h2&gt;

&lt;p&gt;The HTTP verbs always seem to cause some confusion, so for the sake of avoidance of doubt the most common usages for the most common verbs are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; gets a resource&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; appends an item to a list resource&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; (to a non-existent path) creates a new resource at that path&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; (to an existing path) completely replaces the resource at that path&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; updates the resource at the path&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt; deletes the resource at the path&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unless there’s a good reason not to, &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; should return the created or updated resource in the response to ensure that clients don’t have to &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; it immediately afterwards to see the results. We’ll look at these verbs in more depth later when we consider creating and updating resources.&lt;/p&gt;

&lt;p&gt;It’s all too easy to abuse the &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; verb and use it for purposes other than appending to a list. While this is &lt;em&gt;occasionally&lt;/em&gt; valid, more often than not it means you haven’t put enough thought into your resource design and you should consider whether there’s a cleaner and more resource-oriented way to achieve what you’re trying to do.&lt;/p&gt;

&lt;h2 id=&quot;urls&quot;&gt;URLs&lt;/h2&gt;

&lt;p&gt;If URLs refer to list resources then they should be pluralised, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;/books&lt;/code&gt; is a list of books and then &lt;code class=&quot;highlighter-rouge&quot;&gt;/books/9780297859406&lt;/code&gt; is a book with a specific ISBN. If they refer to a singleton resource then they should be singular, for example &lt;code class=&quot;highlighter-rouge&quot;&gt;/users/123/accountcredit&lt;/code&gt; is the only account credit resource for user 123.&lt;/p&gt;

&lt;p&gt;When URLs are hierarchical then they should make semantic sense, and each path segment should be a sub-resource of the resource identified by the preceding path. In the account credit case above, the account credit resource is a sub-resource of the user 123, who is themselves a sub-resource of the complete list of users.&lt;/p&gt;

&lt;p&gt;With user-specific URLs we also have a convention which is that &lt;code class=&quot;highlighter-rouge&quot;&gt;/my&lt;/code&gt; can be used as a synonym for &lt;code class=&quot;highlighter-rouge&quot;&gt;/users/{currentId}&lt;/code&gt; so that rather than having to use &lt;code class=&quot;highlighter-rouge&quot;&gt;/users/123/accountcredit&lt;/code&gt; clients can just use &lt;code class=&quot;highlighter-rouge&quot;&gt;/my/accountcredit&lt;/code&gt; which makes things a little easier for them.&lt;/p&gt;

&lt;h2 id=&quot;parameter-locations&quot;&gt;Parameter locations&lt;/h2&gt;

&lt;p&gt;Should a parameter be in the path or the query? Consider an endpoint that gets a user’s credit cards; possible URLs might be:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/creditcards?userId=123
/users/123/creditcards
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My rule is that &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; requests should work without query parameters, as if the parameter is required then it is necessarily part of the resource identifier. In this case we wouldn’t want &lt;code class=&quot;highlighter-rouge&quot;&gt;GET /creditcards&lt;/code&gt; to work because listing all credit cards in the system is something of a security risk, so the user identifier should be in the path as the resource is a specific user’s credit cards.&lt;/p&gt;

&lt;p&gt;Conversely, an endpoint which could list books and optionally filter them by category should have the category identifier as a query parameter because you’d expect both to work, i.e.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /books                  // gets all the books
GET /books?categoryId=123   // gets all the books in category 123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sometimes it can be difficult to work out whether a filter should be a parameter or a sub-resource. One example of this is in our library where you can archive books you don’t want to see again, this could be represented as either of the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/users/123/library?status=Archived
/users/123/library/archive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both of these are valid but we chose the latter because archived books should normally not be returned, so it makes sense to move the concept of archived status away from the main library endpoint. In addition the query parameter could be confusing because it would have to have a default of &lt;code class=&quot;highlighter-rouge&quot;&gt;Unarchived&lt;/code&gt; to ensure that archived books are not returned, whereas the usual default for filter parameters is unspecified.&lt;/p&gt;

&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;

&lt;p&gt;There are a number of different ways of representing lists. The most basic is an array, i.e.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;isbn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;9780297859406&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;isbn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;9781447252566&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the most lightweight approach in terms of bytes on the wire, but has a major disadvantage that you cannot associate any metadata with the list itself such as whether there are more pages of results. As such, for lists we return an object with an &lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt; field, meaning you can insert metadata related to the list, e.g.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lastPage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;isbn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;9780297859406&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;isbn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;9781447252566&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We try to avoid heterogenous lists (ones that contain multiple types of resource) as these are harder for clients to work with, but sometimes it’s unavoidable such as when returning search suggestions which could be a book, an author, etc. In this case we use a discriminator field &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; so that clients can differentiate between the resource types:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Book&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;isbn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;9780297859406&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1726&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All lists are pageable using &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; parameters, where &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt; is the zero-based index at which to start returning results, and &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; is the maximum number of results to return. We prefer not to return the total number of results available (e.g. to allow things like “Page 1 of 23” in the client) because it makes queries harder to optimise and this kind of paged design is somewhat old-fashioned meaning clients have little need for it. Instead we return a &lt;code class=&quot;highlighter-rouge&quot;&gt;nextPage&lt;/code&gt; flag which indicates whether there are more results.&lt;/p&gt;

&lt;p&gt;It’s generally a good idea to have a default page size and a maximum page size to avoid the situation where you return thousands of results because either somebody forgot to specify a page size or they decided that getting thousands of results at a time was sensible. Whatever these limits are I suggest you make them consistent across all API endpoints to avoid confusion, except in the rare occasion where there’s a good reason to have them deviate.&lt;/p&gt;

&lt;h2 id=&quot;creating-resources&quot;&gt;Creating resources&lt;/h2&gt;

&lt;p&gt;The most common approach to creating an resource is to &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; the resource body to the list that it’s part of; it’s rare that something which can be created isn’t part of a list. The response is generally &lt;code class=&quot;highlighter-rouge&quot;&gt;201 Created&lt;/code&gt; with a &lt;code class=&quot;highlighter-rouge&quot;&gt;Location&lt;/code&gt; header indicating where the new resource was created, and the created resource in the response body. For example, the request to create a bookmark for a user might be something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /users/123/bookmarks
// headers elided for clarity

{
  &quot;isbn&quot;: &quot;9780297859406&quot;,
  &quot;cfi&quot;: &quot;epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/1:0)&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With a response like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 201 Created
Location: http://api.blinkboxbooks.com/users/123/bookmarks/37462
// other headers elided for clarity

{
  &quot;id&quot;: &quot;37462&quot;,
  &quot;isbn&quot;: &quot;9780297859406&quot;,
  &quot;cfi&quot;: &quot;epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/1:0)&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sometimes resource creation can be more complex than this though; one situation is when the list is heterogeneous. A recent example we had was an admin API for crediting or debiting an account, where one option would have been to send the credit or debit with a type discriminator to the list endpoint, e.g.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /users/123/accountcredit
// headers elided for clarity

{
  &quot;type&quot;: &quot;debit&quot;,
  &quot;amount&quot;: { &quot;currency&quot;: &quot;GBP&quot;, &quot;value&quot;: 4.99 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This would be completely valid as a design. However, as for this particular endpoint it’s really important that you create the right type of resource (as the effects on a user’s balance need to be taken pretty seriously) we decided to separate out the endpoints into separate &lt;code class=&quot;highlighter-rouge&quot;&gt;/credits&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/debits&lt;/code&gt; endpoints, making the request like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /users/123/accountcredit/debits
// headers elided for clarity

{
  &quot;amount&quot;: { &quot;currency&quot;: &quot;GBP&quot;, &quot;value&quot;: 4.99 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another more complex situation is where resource creation takes a long time. An example of this is in our storage service where the resource is a file such as an image or epub, which is uploaded to a number of cloud storage providers. In this case if the service cannot complete the upload synchronously it should return &lt;code class=&quot;highlighter-rouge&quot;&gt;202 Accepted&lt;/code&gt; and give the caller a means of checking when the action has been completed; the &lt;code class=&quot;highlighter-rouge&quot;&gt;Location&lt;/code&gt; header would be a good way of doing this if applicable.&lt;/p&gt;

&lt;p&gt;Occasionally it might be appropriate for a client to specify the URL that it wants the resource created at, in which case you should use &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; to the individual resource URL rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; to the list URL. It’s &lt;em&gt;incredibly&lt;/em&gt; rare that you’d want a client to be able to specify the identifier of a resource so I’d normally advise against doing it. However, this is a valid approach if you have a situation where it makes sense, for example if you’re building a Dropbox-like service where the client should be able to specify the path and name of the file.&lt;/p&gt;

&lt;h2 id=&quot;updating-resources&quot;&gt;Updating resources&lt;/h2&gt;

&lt;p&gt;This is something many people get wrong, so I’ll reiterate the semantics of the verbs used for updating resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; (to an existing path) completely replaces the resource at that path&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; updates the resource at the path&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words, if you’re updating the resource then you almost certainly should be using &lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; if you want to be semantically correct. However, there are a couple of reasons why you might not want to be. Firstly, even though &lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; was fully defined nearly five years ago, support for it in proxies and CDNs is still a little patchy (see what I did there?) whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; is universally supported, so if you’re concerned about compatibility at all costs then &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; might be safer. Secondly, numerous web frameworks still don’t support &lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; which could make it impossible to develop unless you’re willing to move to a more modern framework.&lt;/p&gt;

&lt;p&gt;Because it’s rare to have both &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; verbs supported on the same endpoint it probably doesn’t matter which one you use as long as you’re consistent about it and you understand why you’re doing it. We use &lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; because we only support HTTPS which means we don’t need to worry about the behaviour of arbitrary internet proxies.&lt;/p&gt;

&lt;p&gt;The next question is what should your &lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; body contain? You might have seen &lt;a href=&quot;https://tools.ietf.org/html/rfc6902&quot; title=&quot;JavaScript Object Notation (JSON) Patch&quot;&gt;RFC 6902&lt;/a&gt; which describes an operation-based approach to updating resources, with a body something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;op&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/a/b/c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;op&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;remove&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/a/b/c&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;op&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;add&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/a/b/c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;op&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;replace&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/a/b/c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;op&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;move&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/a/b/c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/a/b/d&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;op&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;copy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/a/b/d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/a/b/e&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This approach is, in my opinion, overly-complex nonsense.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; operation is redundant because HTTP already defines a way to perform optimistic concurrency control at an resource level with the &lt;code class=&quot;highlighter-rouge&quot;&gt;If-Match&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;If-Unmodified-Since&lt;/code&gt; directives. You’d be much better off using those because trying to do concurrency control at a sub-resource level is likely to lead to logically inconsistent data.&lt;/p&gt;

&lt;p&gt;The others are also redundant when faced with optimistic concurrency control because there’s no need to specify operations to change parts of an resource: Just define what you want the new value to be and set it to that. The &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; operation for appending to lists within the resource might seem valid at first, but if your list is sufficiently large that you can’t reasonably send the complete new list in the resource body then you’ve probably got your resource modelling wrong and this should be a sub-resource with its own &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; operation to append to it.&lt;/p&gt;

&lt;p&gt;So if you shouldn’t do that, what should you do? Just keep it simple! Set the values you want to change to what you want them to be in the body. If you want a value removed, set it to &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;. For example, to change the &lt;code class=&quot;highlighter-rouge&quot;&gt;cfi&lt;/code&gt; of the bookmark that we created earlier just send a body with a new one:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PATCH /users/123/bookmarks/37462
// headers elided for clarity

{
  &quot;cfi&quot;: &quot;epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2/1:0)&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;status-codes&quot;&gt;Status codes&lt;/h2&gt;

&lt;p&gt;These are common status codes that we return for API requests, grouped by verb.&lt;/p&gt;

&lt;p&gt;If authentication and authorisation is required then there are two more that could apply to any of the verbs, which are commonly confused:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;401 Unauthorized&lt;/code&gt; means that the server either doesn’t know who you are or doesn’t believe that you are who you claim to be. It must include a &lt;code class=&quot;highlighter-rouge&quot;&gt;WWW-Authenticate&lt;/code&gt; header indicating how you can obtain/refresh/etc. the credentials to access the service. Re-authenticating may fix the situation&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;403 Forbidden&lt;/code&gt; means that the server knows who you are and believes you do not have permission to perform the action you were trying to do. Re-authenticating will not fix the situation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;get&quot;&gt;GET&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;200 OK&lt;/code&gt; - the request was successful&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;400 Bad Request&lt;/code&gt; - the request was invalid (e.g. invalid parameters)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;404 Not Found&lt;/code&gt; - the resource does not exist&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;410 Gone&lt;/code&gt; - the resource used to exist but doesn’t any more and will not exist again; in general prefer &lt;code class=&quot;highlighter-rouge&quot;&gt;404 Not Found&lt;/code&gt; to this code, but it may be useful in very specific cases&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;post-or-put-to-non-existent-path-for-resource-creation&quot;&gt;POST, or PUT (to non-existent path for resource creation)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;201 Created&lt;/code&gt; - the resource has been created; the response must include a Location header&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;202 Accepted&lt;/code&gt; - the resource will be created but hasn’t been yet; the request should include a Location header&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;400 Bad Request&lt;/code&gt; - the request was invalid (e.g. invalid body)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;409 Conflict&lt;/code&gt; - the resource already exists&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might find the &lt;code class=&quot;highlighter-rouge&quot;&gt;409 Conflict&lt;/code&gt; code a bit unusual for resource creation as it’s most commonly associated with conflicted updates. However, we found that trying to create sub-resources that already exist is such a common situation that it was worthy of its own status code; it’s arguable that a situation where a sub-resource already exists is a symptom of the list resource being stale, and it is this that generates the conflict. I’m prepared to admit this &lt;em&gt;might&lt;/em&gt; be a minor abuse, but it’s one we’re generally happy with.&lt;/p&gt;

&lt;p&gt;One thing I’ll also mention is that it’s not valid to return &lt;code class=&quot;highlighter-rouge&quot;&gt;404 Not Found&lt;/code&gt; to a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; request unless you specifically mean that the list endpoint does not exist, which you probably don’t. A common mistake I see here is when people are adding a pre-existing resource (e.g. a book) to another list (e.g. a wishlist) that people return &lt;code class=&quot;highlighter-rouge&quot;&gt;404 Not Found&lt;/code&gt; to indicate that the referenced book does not exist; here you should return &lt;code class=&quot;highlighter-rouge&quot;&gt;400 Bad Request&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3 id=&quot;put-to-an-existing-path-for-complete-resource-replacement&quot;&gt;PUT (to an existing path for complete resource replacement)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;200 OK&lt;/code&gt; - the resource has been replaced and the server is returning the complete resource in the body&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;202 Accepted&lt;/code&gt; - the resource will be replaced but it hasn’t been yet&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;204 No Content&lt;/code&gt; - the resource has been replaced and the server is not returning anything in the body&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;400 Bad Request&lt;/code&gt; - the request was invalid (e.g. invalid body)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;404 Not Found&lt;/code&gt; - the resource does not exist&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;409 Conflict&lt;/code&gt; - a conflicting modification has been made to the resource&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;410 Gone&lt;/code&gt; - the resource used to exist but doesn’t any more and will not exist again; in general prefer &lt;code class=&quot;highlighter-rouge&quot;&gt;404 Not Found&lt;/code&gt; to this code, but it may be useful in very specific cases&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;patch&quot;&gt;PATCH&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;200 OK&lt;/code&gt; - the resource has been updated and the server is returning the complete resource in the body&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;202 Accepted&lt;/code&gt; - the resource will be updated but it hasn’t been yet&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;204 No Content&lt;/code&gt; - the resource has been updated and the server is not returning anything in the body&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;400 Bad Request&lt;/code&gt; - the request was invalid (e.g. invalid body)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;404 Not Found&lt;/code&gt; - the resource does not exist&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;409 Conflict&lt;/code&gt; - a conflicting modification has been made to the resource&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;410 Gone&lt;/code&gt; - the resource used to exist but doesn’t any more and will not exist again; in general prefer &lt;code class=&quot;highlighter-rouge&quot;&gt;404 Not Found&lt;/code&gt; to this code, but it may be useful in very specific cases&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;delete&quot;&gt;DELETE&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;202 Accepted&lt;/code&gt; - the resource will be deleted but it hasn’t been yet&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;204 No Content&lt;/code&gt; - the resource has been deleted and the server is not returning anything in the body&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;404 Not Found&lt;/code&gt; - the resource did not exist; only use this if it matters that the resource did not exist, otherwise prefer &lt;code class=&quot;highlighter-rouge&quot;&gt;204 No Content&lt;/code&gt; as the net result is that the resource does not exist which is what was desired&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;410 Gone&lt;/code&gt; - the resource used to exist but doesn’t any more and will not exist again; in general prefer either &lt;code class=&quot;highlighter-rouge&quot;&gt;204 No Content&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;404 Not Found&lt;/code&gt; to this code, but it may be useful in very specific cases&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;error-responses&quot;&gt;Error responses&lt;/h2&gt;

&lt;p&gt;Most of the time status codes are sufficient to work out what went wrong in an API call, but sometimes you need to return an additional sub-status code to differentiate between errors with the same HTTP status.&lt;/p&gt;

&lt;p&gt;Another factor to consider with errors is that sometimes when debugging things you just want to paste a URL into a browser and see what the response is. If it’s an error then it’s a pain to inspect the status code as you need to open the developer console rather than just seeing it in the browser window.&lt;/p&gt;

&lt;p&gt;Consequently, for all errors we return a JSON body with a status code and a helpful developer message such as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;InvalidParameter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;developerMessage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;The 'count' parameter must be greater than zero.&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;br data-jekyll-commonmark-ghpages=&quot;&quot; /&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; field is by default the description of the status code such as &lt;code class=&quot;highlighter-rouge&quot;&gt;BadRequest&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;NotFound&lt;/code&gt;, although when a more specific error code is appropriate it can be substituted, as shown in the example above.&lt;/p&gt;

&lt;p&gt;We use the name &lt;code class=&quot;highlighter-rouge&quot;&gt;developerMessage&lt;/code&gt; for the text to make it clear that this is only for development and must not be relied on in client code – pattern matching on error strings is not a good practice! The distinctive name also makes it easy to scan the codebase for clients who &lt;em&gt;are&lt;/em&gt; using the field so that their developers can be reeducated.&lt;/p&gt;

&lt;h2 id=&quot;data-types&quot;&gt;Data types&lt;/h2&gt;

&lt;h3 id=&quot;dates&quot;&gt;Dates&lt;/h3&gt;

&lt;p&gt;There’s always some debate about date formats in JSON. We use two different ones depending on whether the date means a specific point in time (e.g. the date/time a user purchased a book) or a non-specific day (e.g. the day a book was published).&lt;/p&gt;

&lt;p&gt;For specific datetimes we use &lt;code class=&quot;highlighter-rouge&quot;&gt;yyyy-MM-dd'T'HH:mm:ss'Z'&lt;/code&gt;, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;2014-11-21T09:23:46Z&lt;/code&gt; which is &lt;em&gt;always&lt;/em&gt; UTC to avoid any confusion with time zones. For non-specific dates we use &lt;code class=&quot;highlighter-rouge&quot;&gt;yyyy-MM-dd&lt;/code&gt;, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;2014-11-21&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One reason we don’t use the specific datetime format for non-specific days is that it can result in incorrect display due to time zone corrections. For example, if you return &lt;code class=&quot;highlighter-rouge&quot;&gt;2014-11-21T00:00:00Z&lt;/code&gt; then in BST it can be automatically converted to &lt;code class=&quot;highlighter-rouge&quot;&gt;2014-11-20T23:00:00+0100&lt;/code&gt; by client libraries and accidentally display the previous day when the time portion is removed.&lt;/p&gt;

&lt;h3 id=&quot;money&quot;&gt;Money&lt;/h3&gt;

&lt;p&gt;How to represent money is also often controversial. The usual source of this debate is that people distrust floating point numbers in JSON because they know Javascript only supports binary floating point rather than decimal floating point, and thus believe it is safer to return an integer number of pence rather than the number of pounds.&lt;/p&gt;

&lt;p&gt;The downside of this is that when you need to display the money it needs to be divided by a scale factor to convert it into the display unit, and this unit can vary by currency. This is inconvenient for services consuming the API, and means clients are required to perform financial calculations to display it which is generally undesirable.&lt;/p&gt;

&lt;p&gt;The JSON specification doesn’t actually define the binary representation of numbers; it’s simply a number so it’s up to clients to interpret it appropriately. As such, because we always interpret non-integer numbers in JSON as decimals for safety, we made the decision to use the primary currency unit and have floating point numbers in the representation, e.g. £13.37 would be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;currency&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GBP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;13.37&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You don’t have to include the currency code if you’re sure you’ll only ever accept one currency. If you suspect you might use other currencies in future then it doesn’t hurt to put it in there for forwards-compatibility.&lt;/p&gt;

&lt;h2 id=&quot;versioning&quot;&gt;Versioning&lt;/h2&gt;

&lt;p&gt;I left this until the end because it’s probably the most controversial subject in the whole post and I didn’t want you to stop reading if you disagreed with it.&lt;/p&gt;

&lt;p&gt;There are three common ways to version APIs:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In the path, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;/v2/books&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In the query, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;/books?version=2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In the media type, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;Accept: application/vnd.blinkbox.books.v2+json&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first approach isn’t semantically correct. URLs in REST are supposed to uniquely identify resources (the books themselves) rather than representations (how they appear on the wire), but this approach identifies the representation rather than the resource. This can clearly be seen because if you change a single book resource it would change the response from &lt;code class=&quot;highlighter-rouge&quot;&gt;/vN/books&lt;/code&gt; for all &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;, meaning you have a many-to-one mapping of URLs to a resource.&lt;/p&gt;

&lt;p&gt;The same is true for the second approach, as according to &lt;a href=&quot;https://tools.ietf.org/html/rfc3986&quot; title=&quot;Uniform Resource Identifier (URI): Generic Syntax&quot;&gt;RFC 3986&lt;/a&gt; § 3.4:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The query component contains non-hierarchical data that, along with data in the path component (Section 3.3), serves to identify a resource within the scope of the URI’s scheme and naming authority (if any).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, your query is part of the resource identifier so having a &lt;code class=&quot;highlighter-rouge&quot;&gt;version&lt;/code&gt; parameter means you’re identifying a different resource, when you’re only intending to return a different representation.&lt;/p&gt;

&lt;p&gt;The third approach is semantically correct. You have a resource identified by the URL and return a different representation based on the standard HTTP content type negotiation mechanism. Therefore, you should always use this approach, right?&lt;/p&gt;

&lt;p&gt;Well, it’s not quite as simple as that unfortunately.&lt;/p&gt;

&lt;p&gt;RESTful API design is &lt;em&gt;hard&lt;/em&gt; which means you’re going to get things wrong, and that quite likely includes your resource modelling and thus your URL space. Another thing is that requirements change over time and what was once right may be unsuitable for the future. If your resource modelling is sufficiently wrong or obsolete then it may be infeasible to reuse the same URL space for the new resource model, necessitating an approach like #1 with either a slug in the path or even a different subdomain to entirely separate the APIs.&lt;/p&gt;

&lt;p&gt;We used approach #1 to change the URL space of our v2 API (on which this post is based) because we made a lot of mistakes in the v1 API, for a number of reasons such as developing under severe time pressure and having a team relatively new to REST. It’s nothing to be ashamed of; it’s just a fact of life. We’re hoping the v2 API has a cleaner URL space so we can version that using approach #3, but who knows what the future will hold.&lt;/p&gt;

&lt;p&gt;Don’t forget if you’re using approach #3 that you’ll need to add a &lt;code class=&quot;highlighter-rouge&quot;&gt;Vary: Accept&lt;/code&gt; header to the response body for cache correctness.&lt;/p&gt;</content><author><name>gregbeech</name></author><category term="rest" /><category term="http" /><category term="guidelines" /><summary type="html">We spend a lot of time designing RESTful APIs and discussing different patterns and paradigms. Contrary to popular opinion designing RESTful APIs is actually pretty difficult, so I thought I’d share some of the decisions we’ve made. You might not agree with everything, but I’ve included some discussion around the points so you can at least see why we think it’s the right thing to do.</summary></entry><entry><title type="html">Effective API testing with Cucumber</title><link href="http://localhost:4000/2014/01/19/effective-api-testing-with-cucumber/" rel="alternate" type="text/html" title="Effective API testing with Cucumber" /><published>2014-01-19T00:00:00+00:00</published><updated>2014-01-19T00:00:00+00:00</updated><id>http://localhost:4000/2014/01/19/effective-api-testing-with-cucumber</id><content type="html" xml:base="http://localhost:4000/2014/01/19/effective-api-testing-with-cucumber/">&lt;p&gt;At &lt;a href=&quot;http://www.blinkboxbooks.com&quot;&gt;blinkbox books&lt;/a&gt; we’re making extensive use of Cucumber to capture business requirements and ensure that the code fulfils them. If you’re getting started with Cucumber, a lot of the good practices for writing Gherkin specifications and effectively automating them is captured by &lt;a href=&quot;http://pragprog.com/book/hwcuc/the-cucumber-book&quot;&gt;The Cucumber Book&lt;/a&gt; which is, like most of the Pragmatic Bookshelf, a very good book indeed.&lt;/p&gt;

&lt;p&gt;However, in the chapter where they discuss testing REST APIs they completely dropped the ball. It’s at odds with the rest of the book, and frankly most of the recommendations make no sense at all; you should not be testing your APIs in the way they describe.&lt;/p&gt;

&lt;p&gt;Let’s take an example scenario from chapter 12, “Testing a REST Web Service”, to see the suggested approach:&lt;/p&gt;

&lt;div class=&quot;language-gherkin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;Scenario&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; List fruit
  &lt;span class=&quot;err&quot;&gt;Given the system knows about the following fruit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;banana&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yellow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strawberry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;When &lt;/span&gt;the client requests GET /fruits
  &lt;span class=&quot;err&quot;&gt;Then the response should be JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    [
      {&quot;name&quot;: &quot;banana&quot;, &quot;color&quot;: &quot;yellow&quot;},
      {&quot;name&quot;: &quot;strawberry&quot;, &quot;color&quot;: &quot;red&quot;}
    ]
    &quot;&quot;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll note that this is significantly different from a normal Gherkin specification because it includes significant technical detail such as the HTTP verb &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;, the URL &lt;code class=&quot;highlighter-rouge&quot;&gt;/fruits&lt;/code&gt; and an entire JSON object for the response. It’s also incredibly tightly coupled to the implementation.&lt;/p&gt;

&lt;p&gt;This completely goes against the advice given in the rest of the books, for example at the start of chapter 5 it says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When you’re writing Cucumber features, make readability your main goal. Otherwise, a reader can easily feel like they’re reading a computer program rather than a specification document, which is something we want you to try to avoid at all costs. After all, if your features aren’t easy to read, you might as well just be writing your tests in plain old Ruby code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good advice indeed. The level of technical detail in the above scenario would be appropriate in a lower level testing framework such as RSpec, which is intended to be used to test specific implementation details, but feels wholly out of place in a Gherkin specification.&lt;/p&gt;

&lt;p&gt;The above scenario also falls foul of a number of the points in chapter 6, “When Cucumbers Go Bad”, namely:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Incidental Details: The details such as the specific HTTP verb used and, in particular, the URL of the resource itself, feel like incidental details. It’s not clear why any stakeholder would need to know these details.&lt;/li&gt;
  &lt;li&gt;Imperative Steps: The step to &lt;code class=&quot;highlighter-rouge&quot;&gt;GET /fruits&lt;/code&gt; is clearly failing to create its own domain language, instead deferring to the specifics of the underlying HTTP protocol. The recommendation to raise the level of abstraction and write steps in a declarative style is completely ignored.&lt;/li&gt;
  &lt;li&gt;Brittle Features: The JSON document implies an implicit ordering, but is this based on the order the data was inserted into the system? Or alphabetical based on name? It’s not clear. Given the JSON matching semantics aren’t specified it seems that this test could be brittle when an unrelated change causes a different sort order to be returned. It might even be a flickering scenario, where sometimes the sort order is correct, but sometimes not.&lt;/li&gt;
  &lt;li&gt;Duplication: At the moment there doesn’t look like any duplication, but once you start creating lots of tests for fruits there will be many, many JSON documents littered throughout the Gherkin specifications. Want to add a new attribute to the JSON? Time to go back and change them all…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s an attempt at an explanation for why the authors have entirely ignored everything about the approach they espoused in the first eleven chapters:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Joe asks: I Thought Scenarios Should Avoid Technical Terms Like JSON&lt;/p&gt;

  &lt;p&gt;It’s always important to make a scenario readable by a stakeholder. However, for a REST interface, the stakeholder is going to be another programmer writing a client for the REST interface. In such cases, it’s fine to expose technical details.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But this is based on a false premise.&lt;/p&gt;

&lt;p&gt;In this simple scenario there aren’t much in the way of requirements, but in the real world you’re likely to have some other constraints such as the fact that you can’t make smoothies from fruits that aren’t in stock, so you probably need a way to return only available fruits. You might also need to know how many fruits are available – but for watermelons or pineapples which are large and require pre-preparation in the form of peeling and chopping it may be weight rather than count. And some fruits such as oranges may be pre-squeezed, so those quantities might be measured in volume.&lt;/p&gt;

&lt;p&gt;You presumably also need recipes to suggest which fruits go together, and some sort of price list for pre-selected combinations and ad-hoc blends, and perhaps even the available sizes of cups, and so on, and so on. In other words, there’s likely to be a moderately complex logical data and operation model hiding behind even this throwaway scenario.&lt;/p&gt;

&lt;p&gt;Is the client programmer the stakeholder for that?&lt;/p&gt;

&lt;p&gt;I sure as hell hope not.&lt;/p&gt;

&lt;p&gt;Unless you’re a really small company with a few developers hacking out code to try and get it off the ground – in which case you’re probably not using Cucumber because you don’t have the time – then you probably have product managers who define the vision for the future and specify how these things should work (albeit usually with input from the development and test team). The product team own the requirements, and thus &lt;em&gt;they&lt;/em&gt; are the stakeholders for the API, and the Gherkin specifications need to be written with &lt;em&gt;them&lt;/em&gt; in mind.&lt;/p&gt;

&lt;p&gt;Are all of your product managers familiar with the details of HTTP and JSON? The difference between &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt;? The difference between &lt;code class=&quot;highlighter-rouge&quot;&gt;200 OK&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;202 Accepted&lt;/code&gt;? Of couse not. Heck, even most developers are embarrassingly unaware of many of the commonly used parts of HTTP.&lt;/p&gt;

&lt;p&gt;So if you’re writing Gherkin for REST APIs – or, indeed, any APIs – then you need to write it using the same approach as you would with any other Gherkin. Just pretend chapter 12 doesn’t exist.&lt;/p&gt;

&lt;p&gt;You might think I’m unfairly picking on a single book here, but the fact is that The Cucumber Book is the &lt;em&gt;de facto&lt;/em&gt; book for learning Cucumber and when they have got something so hideously wrong it means that the wrong approach is going to get widely propagated. We even tried their approach at our company before realising that with more complex APIs it led to a huge amount of repetition and brittle scenarios, and was utterly useless for describing the actual behaviour of the API to anybody, including other developers.&lt;/p&gt;

&lt;p&gt;So, let’s have a go at writing the scenario to be more readable and less brittle:&lt;/p&gt;

&lt;div class=&quot;language-gherkin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;Scenario&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; List fruit
  &lt;span class=&quot;err&quot;&gt;Given the system knows about the following fruit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;banana&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yellow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strawberry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;When &lt;/span&gt;the client requests a list of fruit
  &lt;span class=&quot;nf&quot;&gt;Then &lt;/span&gt;the response is a list containing two fruits
  &lt;span class=&quot;err&quot;&gt;And one fruit has the following attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;banana&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yellow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;And one fruit has the following attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strawberry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first step is fine, so I’ve left that as is, but after that things start to diverge. The steps use product language instead of specific technical details, and although the last two steps might look quite technical they are a representation of a logical data model and thus I believe are fine in a product-oriented document. They use the vague preposition ‘one’ rather than ‘the first’ and ‘the second’ as I’m assuming order isn’t important here; if it is then it would be an easy change to make.&lt;/p&gt;

&lt;p&gt;Note that this specification does not even make mention of HTTP or JSON, so could easily be mapped to other kinds of API or different implementations without having to rewrite the product requirements.&lt;/p&gt;

&lt;p&gt;We’ll go through the changed steps one at a time, along with corresponding implementation, starting with the following (all the code to support this post is available &lt;a href=&quot;https://github.com/gregbeech/cukes_rest&quot;&gt;on GitHub&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;language-gherkin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nf&quot;&gt;When &lt;/span&gt;the client requests a list of fruit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This step now states exactly what the client is doing in product language, thus creating its own domain specific language. The implementation is fairly trivial, assuming that we have an &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; helper method defined somewhere (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;rack-test&lt;/code&gt;) and creates the mapping between the product requirement and HTTP.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;When&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^the client requests a list of (.*?)s?$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pluralize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rather than hard-coding “fruit” the step is parameterised so that it can be used for lists of other things, making automation of future scenarios faster. I brought in the &lt;code class=&quot;highlighter-rouge&quot;&gt;pluralize&lt;/code&gt; method from ActiveSupport so we can say “fruit” rather than “fruits” in the Gherkin file, which is more grammatically correct.&lt;/p&gt;

&lt;p&gt;The step assumes a strong API convention that lists are at the root with a name corresponding to their type, so for example a if the step said “cup sizes” instead of “fruits” then the requested URL would be &lt;code class=&quot;highlighter-rouge&quot;&gt;/cup-sizes&lt;/code&gt;. As we will see going forward, having strong conventions makes creating your tests easier, and ultimately allows you to derive your exact API design from the product requirements.&lt;/p&gt;

&lt;p&gt;The next step describes what the expected response is at a high level, and it is very easy for a person reviewing the test to see that it would be the logical outcome of the first two steps.&lt;/p&gt;

&lt;div class=&quot;language-gherkin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nf&quot;&gt;Then &lt;/span&gt;the response is a list containing two fruits
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Although this is a short step, it tells us a lot about the structure of the response: it’s a list, it has two items in it, and each item should look like a fruit. The automation for this is actually a little complex, if we take the time to make it reusable, with the step definition looking something like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^the response is a list containing (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CAPTURE_INT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;) (.*?)s?$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MultiJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;validate_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;of: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;count: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both the count and the type of item are parameterised in the step definition to make it reusable, and to allow proper English grammar (where numbers up to ten are spelled rather than written as numerals) there’s a handy transform function defined.&lt;/p&gt;

&lt;p&gt;In general I’m not a massive fan of transforms as unless they are very specific they can activate in unexpected places and give you some really baffling behaviour until you work out that a rogue transform is the issue, but this one is the exception I make to that rule:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;CAPTURE_INT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^(?:-?\d+|zero|one|two|three|four|five|six|seven|eight|nine|ten)$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;sx&quot;&gt;%w(zero one two three four five six seven eight nine ten)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Clearly we also need a &lt;code class=&quot;highlighter-rouge&quot;&gt;validate_list&lt;/code&gt; function to implement the step logic:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;of: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;count: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_a_kind_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;validate_item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;validate_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;singularize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'_'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sym&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validate_item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate_fruit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_a_kind_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_empty&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_a_kind_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^(green|purple|red|yellow)$/i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This method does the basic checks that the data returned is an array and has the expected number of items, and then checks that each item in the array has the expected structure by dispatching to a method name derived from the Gherkin step text. By writing the code in this way, we can check for lists of other types of item simply by adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;validate_item_type&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;It might seem like there’s a lot of hidden logic in this step, but the code does &lt;em&gt;exactly&lt;/em&gt; what the step definition says – checks for a list containing two fruits – and anything with less validation around what a list is or what a fruit structure looks like would not fulfil that requirement.&lt;/p&gt;

&lt;p&gt;The final steps perform additional validation on the contents of the list, beyond just checking the structure:&lt;/p&gt;

&lt;div class=&quot;language-gherkin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;err&quot;&gt;And one fruit has the following attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;banana&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yellow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The automation for the step converts the specified table into a hash, and this is another good reason for having the type in the table, so that the conversion can be done accurately as by default everything in Gherkin is a string. It then searches the array for matching items and checks the count.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CAPTURE_INT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;) (?:.*?) ha(?:s|ve) the following attributes:$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expected_item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;attribute&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;camelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constantize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MultiJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;matched_items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matched_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve just done some very basic exact matching of attributes here, but in all likelihood you’d want to do something more complex and match values that has the specified attributes even if they had extra ones. This also parses the response body again, which is a little inefficient, though in practice it makes little difference.&lt;/p&gt;

&lt;p&gt;Note that again this makes use of conventions by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;camelize&lt;/code&gt; on the name field, because it assumes the JSON will be camel cased. As a result, the Gherkin can be cleaner for attribute names with multiple words, e.g. a JSON attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;inStock&lt;/code&gt; can be written “&lt;code class=&quot;highlighter-rouge&quot;&gt;in stock&lt;/code&gt;” in the test, further decoupling requirements from implementation.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;to_type&lt;/code&gt; method is a non-standard addition, and uses some slightly dirty hacks to allow things like &lt;code class=&quot;highlighter-rouge&quot;&gt;Boolean&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Enum&lt;/code&gt; to be specified as types in the Gherkin even though they don’t exist in Ruby. I wouldn’t do them in production code, but in test code I think it’s fine.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrueClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FalseClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# cannot use 'case type' which checks for instances of a type rather than type equality&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/true/i&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_f&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And with that, we have a completed API test that is totally decoupled from the technology used to implement the API and therefore can be written first to specify what the behaviour should be. It was quite a lot of work, and some of the step definitions were more complex than needed just for it, but that will pay off in the future.&lt;/p&gt;

&lt;p&gt;Let’s test that theory by specifying and designing a new cup sizes API in a similar manner.&lt;/p&gt;

&lt;div class=&quot;language-gherkin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;Scenario&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; List cup sizes
  &lt;span class=&quot;err&quot;&gt;Given the system knows about the following cup sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fluid&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ounces&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Regular&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt;           &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Large&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;           &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;When &lt;/span&gt;the client requests a list of cup sizes
  &lt;span class=&quot;nf&quot;&gt;Then &lt;/span&gt;the response is a list containing two cup sizes
  &lt;span class=&quot;err&quot;&gt;And one cup sizes has the following attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Regular&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fluid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ounces&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;12&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;And one cup sizes has the following attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attribute&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Large&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fluid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ounces&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;16&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’d need to implement a new &lt;code class=&quot;highlighter-rouge&quot;&gt;Given&lt;/code&gt; step but I’ll skip the implementation of that in this post because the setup steps have been out of scope so far.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;When&lt;/code&gt; step is already automated as the parameterised step will match it, and based on the convention we’ve used it means that then API endpoint must be at &lt;code class=&quot;highlighter-rouge&quot;&gt;/cup-sizes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first &lt;code class=&quot;highlighter-rouge&quot;&gt;Then&lt;/code&gt; step will be matched by the existing definition, but it will fail because it’s expecting a &lt;code class=&quot;highlighter-rouge&quot;&gt;validate_cup_size&lt;/code&gt; method to be available. It isn’t, but we know how to define it because we’ve got our specification for what a cup size should be. The remaining &lt;code class=&quot;highlighter-rouge&quot;&gt;Then&lt;/code&gt; steps are already automated as the existing code to match attributes will work just fine.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate_cup_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_a_kind_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_empty&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fluidOunces&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be_a_kind_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fluidOunces&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, although the first scenario was slow and a bit complex to write, the second one only required six additional lines of basic code to get it fully working. The conventions used by the tests also defined what our API must look like, otherwise they will fail, which helps to ensure a consistent design even when multiple developers are working on it.&lt;/p&gt;

&lt;p&gt;This is really only a flavour of where you can go with convention-oriented API tests using product language rather than technical details to describe the behaviour, and deriving the technical details from that, as Cucumber should be! It’s the approach we’re taking at &lt;a href=&quot;https://www.blinkboxbooks.com/&quot;&gt;blinkbox books&lt;/a&gt;, and we’re developing some libraries that should help you to do a similar thing more easily which we’ll hopefully have out in the wild in early 2014.&lt;/p&gt;

&lt;p&gt;Let me know what you think, or even better &lt;a href=&quot;http://jobs.blinkbox.com&quot;&gt;come and help us out&lt;/a&gt;!&lt;/p&gt;</content><author><name>gregbeech</name></author><category term="cucumber" /><category term="gherkin" /><category term="testing" /><summary type="html">At blinkbox books we’re making extensive use of Cucumber to capture business requirements and ensure that the code fulfils them. If you’re getting started with Cucumber, a lot of the good practices for writing Gherkin specifications and effectively automating them is captured by The Cucumber Book which is, like most of the Pragmatic Bookshelf, a very good book indeed.</summary></entry><entry><title type="html">What I look for in a CV</title><link href="http://localhost:4000/2013/07/12/what-i-look-for-in-a-cv/" rel="alternate" type="text/html" title="What I look for in a CV" /><published>2013-07-12T00:00:00+01:00</published><updated>2013-07-12T00:00:00+01:00</updated><id>http://localhost:4000/2013/07/12/what-i-look-for-in-a-cv</id><content type="html" xml:base="http://localhost:4000/2013/07/12/what-i-look-for-in-a-cv/">&lt;p&gt;In my day job I see lots of CVs and most of them are, frankly, terrible. Some of them are probably OK for applying to companies you don’t want to work at, like banks or large consultancies, but if you want to work in a small startup-like company with really smart people then you need to rethink a lot of what you’ve got on there. Not that I’m necessarily including myself in the really smart category, but I’m doing my best to make sure everybody who works for me is; managing people is easy (or easier, at least) if they’re better than you!&lt;/p&gt;

&lt;p&gt;So, if you want to get through the door, this is what you need to do.&lt;/p&gt;

&lt;p&gt;Firstly, and most importantly, I want to see prominent links to your GitHub profile, your Stack Overflow profile, your blog, your twitter feed, online courses you’ve completed, the website you made for your cat, etc., etc. In other words, convince me that development isn’t just a job for you, that it’s a passion, and something you’d do even if you didn’t get paid for it. Because if it isn’t, you’re never going to be great. Sorry, but you’re not. And that’s fine; not everybody needs to be great. There are plenty of jobs for people who aren’t. They’re just not on my team.&lt;/p&gt;

&lt;p&gt;Of course, these things aren’t just useful for showing you’ve got passion. They’re useful for showing that you can write code. We use &lt;a href=&quot;http://codility.com&quot;&gt;Codility&lt;/a&gt; to administer coding tests for people who haven’t got enough of a public profile to convince us that they’re worth getting in. These are kinda fun – I sometimes try the questions out in my spare time for a bit of a challenge, and to see if there are new questions I’d like to use – but they’re a massively flawed way to see whether you’re actually a good developer. You might come across a question that doesn’t suit you, or one that you just can’t see a solution to… or you might just have a bad day and do badly. Why take the risk? Show me code or forum answers or anything that proves you’re awesome and we can skip past all that and start talking straight away.&lt;/p&gt;

&lt;p&gt;The next thing I want to see is a bit of a personal profile. It doesn’t have to be long – a few sentences is enough – but it should give me an insight into who you are, what you’re looking for in a job, and what you’re &lt;em&gt;not&lt;/em&gt; looking for in a job. Tell me what languages and platforms you like, and maybe even a short note about why. Tell me what languages and platforms you &lt;em&gt;don’t&lt;/em&gt; like and why; often that’s even more interesting than the positive stuff! Make me want to hire you as a person before I even start looking at your GitHub/SO/etc. profiles (note: at this point I’ve given you plus points for the links being there, but I probably haven’t checked them out yet; make me want to do so!).&lt;/p&gt;

&lt;p&gt;An important point when writing your personal profile is not fill it full of buzzwords like “motivated self-starter”, “passionate”, “enthusiastic” and “over-achiever”. Everybody puts that on there so you’re just wasting space. Also, don’t put things on there like “loves learning new technologies” unless you really do love learning new technologies and you can back it up on your CV (e.g. you’ve introduced them at work, you’re put a project using them up on GitHub, you’ve blogged about them) otherwise I’ll just assume you’ve put this down because you think it’s something you &lt;em&gt;should&lt;/em&gt; have done when you were actually slumped in front of the TV.&lt;/p&gt;

&lt;p&gt;And please, &lt;em&gt;please&lt;/em&gt;, don’t write it in the third person because it just makes you come across as a pompous asshole.&lt;/p&gt;

&lt;p&gt;If you haven’t got any links to your profiles on the web, and you haven’t got a personal profile, then I’ll probably stop reading at about that point. In many cases, that means I’ll have got about as far as your name before I stop caring.&lt;/p&gt;

&lt;p&gt;Next!&lt;/p&gt;

&lt;p&gt;However, if you’ve got both then I’m probably already getting interested enough to think about setting up a chat, either on the phone or in person, so pretty much all you’ve got to do is not screw it up in the rest of the CV. As such, here are the things that you shouldn’t do.&lt;/p&gt;

&lt;p&gt;First, don’t have a skills section listing every single technology you’ve ever heard of. In fact, don’t even have a skills section at all. If it isn’t important enough to highlight in your personal profile, then it isn’t important enough to highlight full stop. The right place for any non-key technical skills is in your employment history which lets me see the context in which they were used. Long lists of technologies might be good for keyword-matching algorithms, but they just make me think you’re spamming your CV out to lots of companies rather than being selective about your next role, which is hardly indicative of a great developer.&lt;/p&gt;

&lt;p&gt;However, if you &lt;em&gt;really&lt;/em&gt; insist on having a skills section, then here’s a list of things not to put in it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;JSE, JEE, Java ME, JMX, JAXB, JAX-WS, JAX-RS, JMS, JDBC, JPA, JUnit, TestNG, Spring, Hibernate, Log4J&lt;/em&gt;: If you’ve done more than a couple of years of Java then it’s fairly safe to assume that you’ve used most or all of the above. It’s not something that makes you stand out because &lt;em&gt;everybody&lt;/em&gt; has done all of those things.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;HTML5, XHTML, CSS, JavaScript, AJAX&lt;/em&gt;: These are now so ubiqitous that I tend to ignore them, because you probably don’t know any of this stuff well enough to justify it being there. Having once made a page with Bootstrap and six lines of jQuery doesn’t count. If you can’t explain the differences between HTML 4 and 5, the box model,  hoisting and prototypal inheritance without even flinching then you don’t know this stuff. Just take it off.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;XML, XSLT, XPath, JSON, UML, SQL, etc.&lt;/em&gt;: You’re a developer. I assume you know this stuff well enough to get by. You don’t need to call it out specifically. OK, if you’re unbelievably amazing at SQL then it might be worth calling out, but what you probably mean is that you know how to create, update and delete stuff which is hardly mind blowing.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;SVN, Perforce, CVS, Git, TFS, Jira, BugZilla&lt;/em&gt;: Wow! You can use source control and bug tracking systems! Who would have thought any developer in the modern age would be able to do something like that?! If you’re Linus Torvalds and you actually &lt;em&gt;wrote&lt;/em&gt; Git then by all means put it on there, otherwise these are just yet more things I’ve already assumed you’re comfortable with.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Eclipse, IntelliJ, XCode, Visual Studio, Flex Builder&lt;/em&gt;: Seriously? You’re telling me that you used IDEs to write code? I honestly cannot imagine what goes through the mind of anybody who thinks that listing the IDEs they’ve used on their CV is going to be in any way beneficial to their chances of getting a job.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Windows, UNIX, Linux, OS X, Word, Excel, PowerPoint&lt;/em&gt;: Now you’re just taking the piss.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully I’ve discouraged you from having a skills section, so let’s move onto the next section (and it should be the next section after your personal profile) which is your career history. What I want to see for each job are these details, in reverse chronological order:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Job title&lt;/li&gt;
  &lt;li&gt;Company name&lt;/li&gt;
  &lt;li&gt;Start and end date (month and year is fine)&lt;/li&gt;
  &lt;li&gt;A description of what you did&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You don’t need to put a description of the company, a link to their website, or the marketing blurb from the products they made (I’m not kidding, somebody really did once send me a CV with half the brochure for the company’s products under each job). If the company is significant then I’ll recognise it. If I’m interested I’ll look it up. If not, I won’t. In any case, there’s no point in it being on your CV.&lt;/p&gt;

&lt;p&gt;The start and end date is important because it lets me see how long you’ve been in each job, and whether there are any gaps. Everybody’s path varies so I try not to read too much into this, but if you’ve got a lot of short jobs or a couple of significant gaps then it’s likely to raise eyebrows. It’s not necessarily going to be a problem, but you should be prepared to explain it in an interview.&lt;/p&gt;

&lt;p&gt;In the description of what you did, don’t use bullet points. I know you think they stand out and they’re easy to scan, but in reality they just seem lazy and don’t tell a story. Write in prose. I’m looking for a summary of what you did there and which technologies you used. It should be as short as possible, but no shorter. Don’t miss out important details in the name of terseness, but at the same time don’t make it an essay. If it’s getting much beyond half a page then consider trimming it down. And as the jobs age, the descriptions should get shorter; nobody cares about the finer points of the FORTRAN job you had back in the 80s.&lt;/p&gt;

&lt;p&gt;Note that the description should contain what you, specifically, did in the job. Not what you were “involved” in. Not what you “participated” in. Not what your team did. What &lt;em&gt;you&lt;/em&gt; actually &lt;em&gt;did&lt;/em&gt;. Steve Yegge calls these slippery verbs &lt;a href=&quot;http://steve-yegge.blogspot.co.uk/2007/09/ten-tips-for-slightly-less-awful-resume.html&quot;&gt;weasel words&lt;/a&gt; because they’re a great way to seem like you did some cool stuff, when in reality you sat on the sidelines while other people did the work. If you didn’t do it yourself then don’t put it in there.&lt;/p&gt;

&lt;p&gt;The next section should be education, which pretty much means your degree if you have one. If you don’t, then just skip this section. Similarly, if you got a 3rd then you’re probably better off just pretending you don’t have a degree, because all that says is that you slacked off and got pissed when you should have been studying.&lt;/p&gt;

&lt;p&gt;Finally, the interests and activities section. Actually, scratch that. Nobody cares about your interests and activities when they’re recruiting, so leave them for the pub once you’ve got the job. The only real exception to this is if one of your interests aligns with the company – for example, we’re a book company so if you love books then it’s worth highlighting that – but it should be highlighted in your personal profile rather than hidden down at the end of the CV. I’m assuming you’re smart enough to tweak your personal profile so it’s tailored to each company…&lt;/p&gt;

&lt;p&gt;So there you are: three sections (profile, career, education) and no bullet points. Keep it under a couple of pages if you can, with three being an absolute outside limit. I see a lot of CVs and I only have a finite amount of time to spend looking at each one, which means that I’m not going to read every detail of the eight page masterpiece you’ve sent, even if it is of Dickensian quality.&lt;/p&gt;

&lt;p&gt;Keep these tips in mind, and you’ll have an interview in no time. See you there!&lt;/p&gt;

&lt;p&gt;Oh wait, I nearly forgot, because it’s so obvious that I shouldn’t even have to mention it. The fact that I do is something of a tragedy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The acceptable number of spelling mistakes on a CV is zero.&lt;/li&gt;
  &lt;li&gt;The acceptable number of grammatical errors on a CV is zero.&lt;/li&gt;
  &lt;li&gt;The acceptable number of incorrectly capitalised acronyms on a CV is zero.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your first language isn’t English, the rest of your CV is brilliant, and I’m in a good mood then I &lt;em&gt;might&lt;/em&gt; make a concession and allow one mistake in one of these areas. But I probably won’t. Development requires precision, and if you can’t even get the couple of pages you’re using to try and shape the next few years of your life right, then how can I trust you with code?&lt;/p&gt;

&lt;p&gt;Get somebody to check your CV over before you submit it. Even a word processor will do a better job than most people manage; those red and green squiggly lines under words aren’t just there for decoration!&lt;/p&gt;</content><author><name>gregbeech</name></author><category term="cv" /><category term="hiring" /><category term="resume" /><summary type="html">In my day job I see lots of CVs and most of them are, frankly, terrible. Some of them are probably OK for applying to companies you don’t want to work at, like banks or large consultancies, but if you want to work in a small startup-like company with really smart people then you need to rethink a lot of what you’ve got on there. Not that I’m necessarily including myself in the really smart category, but I’m doing my best to make sure everybody who works for me is; managing people is easy (or easier, at least) if they’re better than you!</summary></entry><entry><title type="html">RESTful API Design: The Fundamentals</title><link href="http://localhost:4000/2013/05/21/restful-api-design-the-fundamentals/" rel="alternate" type="text/html" title="RESTful API Design: The Fundamentals" /><published>2013-05-21T00:00:00+01:00</published><updated>2013-05-21T00:00:00+01:00</updated><id>http://localhost:4000/2013/05/21/restful-api-design-the-fundamentals</id><content type="html" xml:base="http://localhost:4000/2013/05/21/restful-api-design-the-fundamentals/">&lt;p&gt;I’ve spent quite a lot of time over the last few years thinking about, designing and building RESTful APIs. Far more time than I expected, given that they have a reputation for being very simple. They’re not. In fact, I’d go so far as to say that RESTful APIs are harder to design, harder to build, and (depending on your language of choice) harder to consume than just about any other style of web API.&lt;/p&gt;

&lt;p&gt;So, you might quite reasonably ask, why build one in the first place? The main reason is that a properly designed RESTful API has significantly less coupling between client and server than any other style, making it easier to modify and version while retaining compatibility. There are also other tangible benefits such as allowing for more efficient caching of responses, and less tangible benefits such as the discipline that it enforces in thinking about your domain.&lt;/p&gt;

&lt;p&gt;This is going to be a fairly long post, so if you’re the impatient type then you can just skip ahead to the &lt;a href=&quot;#checklist&quot;&gt;checklist&lt;/a&gt; and see if you’re doing things right. Otherwise, we’ll start in just about the only place that makes sense in a resource-oriented architecture.&lt;/p&gt;

&lt;h2 id=&quot;resources-and-representations&quot;&gt;Resources and Representations&lt;/h2&gt;

&lt;p&gt;One of the most frequently confused aspects of REST is the difference between a resource and a representation. A resource is a noun, for example a book or a person, but a representation is a particular way of looking at a noun using a specific JSON/XML/HTML/etc. structure. In other words, a single resource can have a number of different representations, and a number of different representations can all represent the same resource.&lt;/p&gt;

&lt;p&gt;When REST is mapped to HTTP, the resource being acted upon (i.e. the noun) is defined by the URL. For example the book “Ultimatum” by Simon Kernick might be located at:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/catalogue/books/9781448136698
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The representation that is returned is determined by HTTP content negotiation using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Accept&lt;/code&gt; header, and indicated in the response using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; header. For example the following header would indicate that the response is encoded as JSON:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Content-Type: application/json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similarly, the following header would indicate the response is encoded as XML:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Content-Type: application/xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Two different representations of a single resource. All good so far.&lt;/p&gt;

&lt;p&gt;However, using a generic markup language media type is a sign of another commonly confused aspect of REST: the difference between markup language and dialect. A generic media type like &lt;code class=&quot;highlighter-rouge&quot;&gt;application/json&lt;/code&gt; tells you the markup language used to encode the data, but nothing about how to interpret the data itself.&lt;/p&gt;

&lt;p&gt;You might think that you could use namespaces to resolve this, but (a) that only works for markup languages that support namespaces, so JSON’s out, and (b) it doesn’t give any way for the client to specify which versions of the dialect it understands so you might be returning a version that it can’t handle anyway. Using a generic media markup language media type means it’s impossible to version your dialect.&lt;/p&gt;

&lt;p&gt;To solve this problem you need to define your own media types that takes both the dialect and markup language into account, for example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Accept: application/vnd.example.data.v1+json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;vnd.&lt;/code&gt; part means this is a vendor-specific media type as opposed to one registered with IANA, the &lt;code class=&quot;highlighter-rouge&quot;&gt;.v1&lt;/code&gt; part allows different versions of the dialect, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;+json&lt;/code&gt; part indicates the markup language used to encode the dialect. This means it’s easy to modify the media type to move to a new dialect (&lt;code class=&quot;highlighter-rouge&quot;&gt;.v2&lt;/code&gt;) or to allow the dialect to be encoded in a different markup language (&lt;code class=&quot;highlighter-rouge&quot;&gt;+xml&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;+html&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If the media types are likely to be widely used then you should  consider going through the standardisation process and registering proper media types with IANA which would allow you to drop the &lt;code class=&quot;highlighter-rouge&quot;&gt;vnd.&lt;/code&gt; part. For most people who are working in smaller companies or whose API isn’t likely to be widely used, though, this probably isn’t worth the effort.&lt;/p&gt;

&lt;p&gt;Many people find the idea of having custom media types strange or abhorrent, but you see it all the time on the web. For example, you could transmit a stream of bytes with the generic media type &lt;code class=&quot;highlighter-rouge&quot;&gt;application/octet-stream&lt;/code&gt; but you’re only going to get an image in the browser if you attach semantics to those bytes by using a media type such as &lt;code class=&quot;highlighter-rouge&quot;&gt;application/jpeg&lt;/code&gt;. Similarly you could publish XML with the media type &lt;code class=&quot;highlighter-rouge&quot;&gt;application/xml&lt;/code&gt;, but your browser only knows to hand it off to a feed reader if you attach semantics to it by using a media type such as &lt;code class=&quot;highlighter-rouge&quot;&gt;application/rss+xml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You should now be able to see why some commonly used means of versioning or requesting a particular markup type in APIs which claim to be RESTful are invalid, and make them anything but:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Specifying the version of the representation in the URL path (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;/v1/catalogue/books/9781448136698&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/v2/catalogue/books/9781448136698&lt;/code&gt;) implies that there are two different resources, when in fact there are two representations of a single resource.&lt;/li&gt;
  &lt;li&gt;Specifying the markup language in the URL query(e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;/catalogue/books/9781448136698?format=json&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/catalogue/books/9781448136698?format=xml&lt;/code&gt;) implies that there are two different resources (as the query string forms part of the resource identity; more on this later) and also tends to preclude versioning of representation schema.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you’re well versed in resources and representations, let’s move onto the topic where most people &lt;em&gt;expect&lt;/em&gt; articles about REST to start.&lt;/p&gt;

&lt;h2 id=&quot;urls&quot;&gt;URLs&lt;/h2&gt;

&lt;p&gt;Contrary to popular belief, from a RESTful standpoint the structure of URLs doesn’t matter at all. Not even a bit. You can spend all the time in the world on defining hierarchical, semantic URLs, but a URL like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/catalogue/books/9781448136698
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;is no more correct than one like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/bbd54f83026d454b991bb2cf01c185a4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;as long as the URL represents a particular resource. Semantic URLs are useful for people as it helps us to structure our thinking, but there’s absolutely no requirement for them.&lt;/p&gt;

&lt;p&gt;Another point often confused is the status of query strings. Originally the query was defined as information to be interpreted by the resource identified by the path, but in January 2005 &lt;a href=&quot;http://tools.ietf.org/html/rfc3986#section-3.4&quot;&gt;RFC 3986 redefined this&lt;/a&gt; so that the query forms part of the resource identifier. This means that the following URL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/catalogue/books?offset=50&amp;amp;count=25
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;should be interpreted as “The book list resource that spans items 50-74” as opposed to “Items 50-74 from within the book list resource”. In other words, the result of a URL with a query is a resource in its own right, not a subset of the resource defined by the path. This is a subtle distinction, but can be important when thinking about semantics.&lt;/p&gt;

&lt;h2 id=&quot;methods&quot;&gt;Methods&lt;/h2&gt;

&lt;p&gt;HTTP methods (aka verbs) are used to perform actions on resources. The method in a request is the &lt;em&gt;only&lt;/em&gt; RESTful way to indicate which action should be performed.&lt;/p&gt;

&lt;p&gt;The most important methods used in REST and their usual semantics are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; - Gets the resource at a URL.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; (to non-existent URL) - Creates a resource at the URL, and returns the resource.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; (to existing URL) - Updates the resource at the URL in its entirety, and returns the resource.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PATCH&lt;/code&gt; - Updates the resource at the URL by applying a set of changes, and returns the resource. This method is defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc5789&quot;&gt;RFC 5789&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; - Creates a resource (typically appending it to a list) and returning the resource.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt; - Deletes the resource at a URL, and returns nothing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that these descriptions are guidelines but there is some room for flexibility allowed by the HTTP specification. A non-exhaustive list of examples is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt; may be used as a ‘reset’ method by interpreting it as having deleted the old entity and immediately created a default replacement one, which it could return as &lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;s are permitted to return an entity-body.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; may be used to create an entity at a known URL when the creation is complex, e.g. the submitted entity is used as the input for processing that results in the creation of the result entity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some other methods that may be useful are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; - Checks for the existence of a resource at a URL, but does not return it.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OPTIONS&lt;/code&gt; - May be used to provide metadata about the resource at a URL (e.g. what methods it supports, what parameters it accepts).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And with that, we can move onto the most important section of the article; the things that really sorts the RESTful APIs from the RPC pretenders.&lt;/p&gt;

&lt;h2 id=&quot;hypertext&quot;&gt;Hypertext&lt;/h2&gt;

&lt;p&gt;The defining characteristic of a RESTful API is that the interchange format is hypertext - i.e. it contains hyperlinks to other related resources so that clients don’t have to have prior knowledge of endpoints to be able to use them. This isn’t just a ‘nice to have’, it’s a requirement for all RESTful APIs:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What needs to be done to make the REST architectural style clear on the notion that hypertext is a constraint? In other words, if the engine of application state (and hence the API) is not being driven by hypertext, then it cannot be RESTful and cannot be a REST API. Period. - &lt;a href=&quot;http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven&quot;&gt;Roy Fielding&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because the client doesn’t need to know the endpoints the server is using in advance - instead following links with standardised relation names which are part of the media type description - the coupling is significantly reduced. The hypertext should also contain sufficient information that any parameters for the links can be discovered and that the request body can be constructed if one is necessary, &lt;em&gt;cf.&lt;/em&gt; HTML forms.&lt;/p&gt;

&lt;p&gt;This last point is one of the more controversial ones in RESTful API design because core entities (e.g. a book, in a book-oriented company) may have a &lt;em&gt;lot&lt;/em&gt; of links to other resources, and each resource may have a &lt;em&gt;lot&lt;/em&gt; of parameters and/or a complex request body. Including information about the capability of each of these links in the response body, just in case the client requires them, would increase the payload size massively. As such, even the most REST-like APIs tend to shy away from being purely RESTful, and accept the increased coupling of having the available parameters hard-coded into clients rather than driven by hypertext.&lt;/p&gt;

&lt;p&gt;I can see both sides of the argument, and in the past most of the APIs I’ve designed and built have ended up being REST-like rather than RESTful because of this concession to payload size. I’m still not convinced it’s the right decision, and I suspect that as network speeds continue to increase we’ll start doing things ‘properly’ and including the operation metadata in the links.&lt;/p&gt;

&lt;p&gt;There’s another alternative that I’ve been considering, and that’s the use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;OPTIONS&lt;/code&gt; method: In other words, return just the bare link in the entity representation, but allow the client to obtain a full description of the operation’s parameters and request payload by querying the endpoint itself (which would also return a hypertext response). This would keep the payloads of messages related to entities small, but still keep the coupling to a minimum because all information about an operation could be discovered at runtime. This seems compelling, although I still haven’t worked out whether it would be RESTful; I should probably drop a mail to Roy Fielding and ask him.&lt;/p&gt;

&lt;p&gt;That’s by no means everything worth saying about hypertext, and we haven’t even covered things like URI templating, but this post is already getting fairly long so I’ll leave it there and leave it to the curious reader to research further.&lt;/p&gt;

&lt;h2 id=&quot;caching&quot;&gt;Caching&lt;/h2&gt;

&lt;p&gt;Caching is an intrinsic part of REST, and an intrinsic part of the HTTP protocol, so needs to be treated as a first class citizen when designing a RESTful API; doing so also allows you to make significant performance gains. The &lt;a href=&quot;/blog/an-incomplete-and-probably-incorrect-guide-to-http-caching&quot;&gt;rules for caching in HTTP are extremely complex&lt;/a&gt; but it’s worth covering the general principles here.&lt;/p&gt;

&lt;p&gt;The two main factors that contribute to how cacheable a response is are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scope - How widely can the response be cached? This can vary from not at all to publicly cacheable (i.e. allowing a CDN or any internet proxy to cache it).&lt;/li&gt;
  &lt;li&gt;Lifetime - How long can the response be cached for? This can vary from no time at all to forever (note: a year is the maximum specifiable, but some caches will treat this as forever).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The server is responsible for declaring these using a combination of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Expires&lt;/code&gt; headers (plus &lt;code class=&quot;highlighter-rouge&quot;&gt;Pragma&lt;/code&gt; for backwards compatibility with HTTP 1.0 caches). However there are some restrictions which may be introduced by the protocol - for example HTTPS responses are never publicly cacheable because intermediate servers cannot decrypt the contents of the response.&lt;/p&gt;

&lt;p&gt;For the best performance, resources should be cached in the widest scope possible for the longest time possible. If a resource is publicly cacheable then the API can be fronted by a CDN, which means that for subsequent client requests the API origin server won’t even be hit, reducing both response time and server load; if you’re lucky it may also get cached by intermediate proxies or edge servers. If a resource is not publicly cacheable then all clients must hit the API origin server for every request.&lt;/p&gt;

&lt;p&gt;However, the scope and lifetime of a response is the lowest common denominator of any piece of data it contains. For example, book metadata may rarely change so could be declared as being publicly cacheable for a week. If, to reduce the number of requests, pricing information is introduced into the representation and this has a contractual maximum change period of four hours, then the entire book can now only be cached for four hours. If user-specific data such as whether the book has been purchased is introduced into the representation, then the entire book representation becomes user-specific and cannot be cached publicly.&lt;/p&gt;

&lt;p&gt;Designing a performant RESTful API requires careful balancing of response scope and lifetime against the number of separate HTTP calls, and the expected levels of parallelism of clients need to be considered. In general terms you should avoid aggregating entities with different scopes or lifetimes into a resource unless performance testing has demonstrated a real-world problem.&lt;/p&gt;

&lt;h2 id=&quot;authentication-and-authorisation&quot;&gt;Authentication and Authorisation&lt;/h2&gt;

&lt;p&gt;While not strictly a RESTful principle, most RESTful APIs will require authorisation to access some endpoints so it’s worth covering the basics here. The terms “authentication” and “authorisation” are frequently interchanged, but they are quite separate concepts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Authentication: Exchange of credentials for a set of claims related to your identity (typically stored in a token).&lt;/li&gt;
  &lt;li&gt;Authorisation: Evaluation of claims to determine whether you have permission to perform an action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Generally authentication will not be handled by a RESTful API; the process is intrinsically procedural, often stateful, and involves sequences of varying complexity depending on the protocol. A common example of authentication is signing into a website where you exchange an email/password credential for a bearer token (as a cookie).&lt;/p&gt;

&lt;p&gt;However, RESTful APIs often perform authorisation. This is typically broken down into two phases:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Processing any authentication tokens in the request and construction of a resultant claim set (typically stored in a principal).&lt;/li&gt;
  &lt;li&gt;Evaluation of the claim set against the requirements for the endpoint.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If the user does not meet the requirements for the end point, the ‘identity’ (or ‘subject’) claim is missing (i.e. the user is not signed in), and signing in could result in the user being allowed access then return 401 Unauthorized. Otherwise, if the user is either already signed in, or signing in could not possibly resolve the lack of permission (e.g. the endpoint is GeoIP restricted so depends on ambient context not identity), then return 403 Forbidden.&lt;/p&gt;

&lt;p&gt;In terms of passing authorisation tokens to a RESTful API then the only semantically correct option is in the headers; as previously discussed it is not valid to put it in the URL because the token itself does not form part of the identity of the resource, even if information contained within the token may be used to select a particular resource. Similarly, it isn’t valid to put it in the body because that’s conflating the resource representation with the permissions to act on it.&lt;/p&gt;

&lt;p&gt;Typically if the token is a cookie it will be passed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Cookie&lt;/code&gt; header, otherwise it will be passed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&lt;/code&gt; header. Note that if using bearer tokens (e.g. cookies) then the endpoint must use transport layer security to protect the token (i.e. HTTPS). You should see this as self-evident. If you don’t, go and beat yourself around the head with &lt;a href=&quot;http://www.troyhunt.com&quot;&gt;Troy Hunt’s blog&lt;/a&gt; until you do.&lt;/p&gt;

&lt;p&gt;As a sidebar to this section: Forget device authorisation or encrypted API keys and the like as a concept. There was a fad for this a few years back, and some misguided souls still depend on it for ‘security’ but the fact is it’s not only pointless, but outright dangerous as it offers a sense of security that just doesn’t exist. Unless we’re talking about trusted third parties with pre-shared keys - which we’re usually not - then any content a client generates to send can, by definition, be generated by a client and thus can, by definition, be spoofed by a malicious client emulating an ‘authorised’ client.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Everybody likes a summary, so here it is:&lt;/p&gt;

&lt;p&gt;REST is hard, and you’re probably doing it wrong.&lt;/p&gt;

&lt;p&gt;Don’t blame yourself; just about everybody is. Heck, if Roy Fielding ever actually reads this article I’ll probably be on the receiving end of a frustrated email telling me all the things I got wrong or missed out (which, frankly, would be awesome).&lt;/p&gt;

&lt;h2 id=&quot;checklist&quot;&gt;Checklist&lt;/h2&gt;

&lt;p&gt;If you got bored part of the way down, or are just looking for a nice TL;DR summary, then I’ve put together this little checklist for you. If the answer to any of these questions is “no” then your API is not RESTful; if the answers to all of them are “yes” then it might be, but I’m not guaranteeing it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It must be possible to use the API in its entirety given only a description of the media types used, and the root URL. &lt;em&gt;(Failure here means that out-of-band information is being used to communicate information about the interaction, rather than hypertext.)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Clients must not have to ‘build’ URLs or payloads, other than in ways that are detailed by the hypertext. &lt;em&gt;(Failure here means that clients have to assume a resource structure either from out-of-band information or by observing conventions.)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;All URLS must represent resources, i.e. they represent nouns. All actions that are performed on resources must be indicated my the HTTP method. &lt;em&gt;(Failure here means that you’ve defined an RPC API instead of a RESTful one.)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Any authorisation must be passed in headers, not on the URL or in the payload. &lt;em&gt;(Failure here means that you’re conflating resources and/or representations with permissions to perform operations on them.)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>gregbeech</name></author><category term="caching" /><category term="guidelines" /><category term="http" /><category term="rest" /><summary type="html">I’ve spent quite a lot of time over the last few years thinking about, designing and building RESTful APIs. Far more time than I expected, given that they have a reputation for being very simple. They’re not. In fact, I’d go so far as to say that RESTful APIs are harder to design, harder to build, and (depending on your language of choice) harder to consume than just about any other style of web API.</summary></entry><entry><title type="html">Java is the new C++</title><link href="http://localhost:4000/2013/05/14/java-is-the-new-c-plus-plus/" rel="alternate" type="text/html" title="Java is the new C++" /><published>2013-05-14T00:00:00+01:00</published><updated>2013-05-14T00:00:00+01:00</updated><id>http://localhost:4000/2013/05/14/java-is-the-new-c-plus-plus</id><content type="html" xml:base="http://localhost:4000/2013/05/14/java-is-the-new-c-plus-plus/">&lt;p&gt;Back in the early 1990s Java was conceived as an alternative to C++ which would be portable, garbage collected, and easier to learn, but still retaining a C-like syntax to make programmers feel more comfortable migrating to it. There are a variety of reasons why Java became so popular on launch, marketing not being the least of them, and now it’s one of the most popular languages in the world. Perhaps &lt;em&gt;the&lt;/em&gt; most popular, depending on which statistics you believe.&lt;/p&gt;

&lt;p&gt;When Java was released in 1996, I wasn’t a developer. In fact, I think at that point the most code I had written was:&lt;/p&gt;

&lt;div class=&quot;language-vb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRINT&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;HELLO WORLD&quot;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GOTO&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;END&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As such, I’m going to have to take the word of the older and more grizzled developers I know that yes, for building many types of software, Java was a much better language than C++. Presumably it still is. The trouble is, the game has moved on, and C++ isn’t the main competition any more.&lt;/p&gt;

&lt;p&gt;It’s the best part of 20 years since Java was launched, and time has left the language behind. For example, can you think of another modern language that doesn’t have lambda expressions and proper closures? And yeah, I know they’re supposed to be coming in Java 8, but they’ve been supposed to be coming for years. And even then Java 8’s release data has slipped back to 2014 (at least), which just encourages derogatory comparison with C++0x… er, I mean C++11.&lt;/p&gt;

&lt;p&gt;What’s even worse is that Java developers know that it’s a clumsy, outdated language. When you point out the incredibly verbose syntax, the pain of checked exceptions (which has to go down as one of &lt;em&gt;the&lt;/em&gt; most stupid language features in history), the incomprehensibility of &lt;code class=&quot;highlighter-rouge&quot;&gt;T[]&lt;/code&gt; not being assignment compatible with &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterable&amp;lt;T&amp;gt;&lt;/code&gt;, and the fact that it’s impossible to transform a collection of something into a collection of something else without either writing five lines of &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;-loop or importing a third party library and writing five lines of anonymous inner class, they’ll still defend it as being “good enough”.&lt;/p&gt;

&lt;p&gt;It isn’t. Not by a long shot.&lt;/p&gt;

&lt;p&gt;Anybody defending Java as a “good enough” language is generally doing so from a position of knowing &lt;em&gt;only&lt;/em&gt; Java and not wanting to have to learn anything else. This only further reinforces my opinion that if anybody describes themselves as an “X developer” you can replace “X” with “average” and have a reasonable probability of being correct. This applies for pretty much any value of X by the way; not just Java. If you don’t care about the language you use every day then it’s hard to believe you’re going to care much about what you produce with it.&lt;/p&gt;

&lt;p&gt;The last stand of the Java developer when trying to defend the language is that at least it’s easy to learn. But that isn’t true either. What they mean is that because Java has so little expressive power that there isn’t much in the way of language features to learn, which &lt;em&gt;is&lt;/em&gt; true, but Java still goes out of its way to make the few concepts it can express appear complex.&lt;/p&gt;

&lt;p&gt;Let’s start with primitives such as &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;byte&lt;/code&gt; which aren’t objects, and their counterparts &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Byte&lt;/code&gt; which are. Because Java isn’t really an object-oriented language, if you want to have an integer that is an object you have to convert your &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer&lt;/code&gt;; this is necessary if you want to put it in a collection because they can only store objects. If somebody is learning the language, is now a good point to start explaining the difference between reference and value types? Probably not. Especially as most developers &lt;em&gt;still&lt;/em&gt; think that value types live on the stack and reference types live on the heap – and that it matters – and thus will try and explain it in those terms.&lt;/p&gt;

&lt;p&gt;This might not seem so bad, as nowadays Java will auto-box your &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; to an &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer&lt;/code&gt; if you try to add it to a collection. But if you try and call a method on it, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;(3).toString()&lt;/code&gt;, then it won’t auto-box it and you’ll get a compiler error, so we’re now in an inconsistent world where primitives are sometimes treated like objects and other times not. And while it’s easy to convert &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer&lt;/code&gt;, you’re back to a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop if you want to convert &lt;code class=&quot;highlighter-rouge&quot;&gt;int[]&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Integer[]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we’re onto the subject of arrays, although generally you find the number of elements in a Java collection using the &lt;code class=&quot;highlighter-rouge&quot;&gt;size()&lt;/code&gt; method, the array type - not being a real object and thus not supporting methods - has a &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt; field instead. Strings aren’t sure whether they’re an array or a collection of characters, so they hedge their bets and use a &lt;code class=&quot;highlighter-rouge&quot;&gt;length()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;That isn’t the biggest array WTF in Java though, because that’s waiting for you when you try to pass an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; to a method that’s expecting an &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterable&amp;lt;T&amp;gt;&lt;/code&gt; and you get a compiler error complaining that they’re incompatible types. I’m sorry, but in what world is an array &lt;em&gt;not&lt;/em&gt; iterable? Yeah, I know it’s because arrays are special types that aren’t really objects and don’t really exist, but that’s no excuse - it’s the same in .NET but at least Microsoft put a load of hacks in their VM to make scenarios that &lt;em&gt;ought&lt;/em&gt; to work &lt;em&gt;actually&lt;/em&gt; work.&lt;/p&gt;

&lt;p&gt;What’s more ridiculous is that there &lt;em&gt;are&lt;/em&gt; some hacks in Java to make arrays appear more like their real-object collection cousins. For example, the “smart” &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop (yeah, that does seem to be its real name) can iterate over both &lt;code class=&quot;highlighter-rouge&quot;&gt;T[]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterable&amp;lt;T&amp;gt;&lt;/code&gt; even though neither are assignment compatible nor share any common interface.&lt;/p&gt;

&lt;p&gt;Sticking with the array theme, in Java it’s possible to check whether a variable contains an array of integers at runtime by writing &lt;code class=&quot;highlighter-rouge&quot;&gt;myVar instanceof Integer[]&lt;/code&gt;. However, if you want to check whether it contains a list of integers then you’re shit out of luck, because writing &lt;code class=&quot;highlighter-rouge&quot;&gt;myVar instanceof List&amp;lt;Integer&amp;gt;&lt;/code&gt; will just see the compiler come back with an error that it’s an illegal type for &lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof&lt;/code&gt;. You actually can only check that it’s a list of &lt;em&gt;something&lt;/em&gt; by writing &lt;code class=&quot;highlighter-rouge&quot;&gt;myVar instanceof List&amp;lt;?&amp;gt;&lt;/code&gt; because generic type information is erased at compile time and so doesn’t exist at runtime. You might not think this is such a big deal, but it causes significant complexity in some libraries; want to explain &lt;a href=&quot;http://wiki.fasterxml.com/JacksonPolymorphicDeserialization#A5.1_Missing_type_information_on_Serialization&quot;&gt;how to deserialize JSON to a generic type&lt;/a&gt; to a beginner?&lt;/p&gt;

&lt;p&gt;We’ve barely covered primitive types and basic collections and already we’re up to paragraphs on the needless complexities inherent in Java. We haven’t even got onto the different types of variance. Ah, yes, variance. Java offers two types of generic variance which I’m going to call “broken” variance and “where’s that book again?” variance.&lt;/p&gt;

&lt;p&gt;“Broken” variance is demonstrated by arrays, where their covariance and mutability can lead to some surprising errors at runtime that can’t be caught by the type system:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Giraffe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;animals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Turtle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// BOOM!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is broken because &lt;a href=&quot;http://blogs.msdn.com/b/ericlippert/archive/2007/10/17/covariance-and-contravariance-in-c-part-two-array-covariance.aspx&quot;&gt;it should always be legal to put a Turtle into an array of animals&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Not much more to say on that one.&lt;/p&gt;

&lt;p&gt;“Where’s that book again?” variance is demonstrated by pretty much all other variance in Java, where it’s so unintuitive you can really only figure out why things aren’t doing what you expect, and how to fix it, by going back to the reference manual. For example, you’d expect a generic iterator to be covariant as types only come ‘out’, and therefore that you’d be able to treat a &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; as an &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterable&amp;lt;Object&amp;gt;&lt;/code&gt;, but:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// error: incompatible types&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to get this to compile then you have to change the declaration of the iterable to indicate its variance:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You probably didn’t need the book to work out how to fix that one, but you might for this. How do you declare a method to get the maximum item from a sequence, which works if the items implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;Comparable&amp;lt;T&amp;gt;&lt;/code&gt; interface anywhere in their inheritance chain (i.e. it could be implemented on their base class)?&lt;/p&gt;

&lt;p&gt;Don’t peek…&lt;/p&gt;

&lt;p&gt;Did you get it?&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comparable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m not even kidding, that’s lifted straight out of Joshua Bloch’s “Effective Java” (a great book, incidentally) as an example of the right way to do things. It’s so complex that it has actually broken the Markdown code block parser in Sublime Text, and I’ve had to remove it temporarily to be able to continue typing!&lt;/p&gt;

&lt;p&gt;Let’s see the C# versions of these examples with the same variance:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IComparable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These just work in C# because variance is defined on the interfaces themselves, and so anywhere the interfaces are used they automatically ‘do the right thing’. Given you &lt;em&gt;use&lt;/em&gt; interfaces a lot more frequently than you &lt;em&gt;declare&lt;/em&gt; them, having variance defined on declaration makes a lot more sense than on usage, and is far easier because you only need to consider one interface at a time rather than the composition of all the interfaces together.&lt;/p&gt;

&lt;p&gt;So let’s sum up where we are: Primitives that aren’t objects, except when they are. Arrays that aren’t iterable, but language constructs that can treat them as such. Types that exist at compile time but not at runtime. Two types of variance, one of which is broken, and the other which requires you to think about covariance and contravariance every time you use it.&lt;/p&gt;

&lt;p&gt;A language that’s easy to learn? I can’t think of any modern language that’s more needlessly complex.&lt;/p&gt;

&lt;p&gt;I feel like I’ve barely scratched the surface here, but actually that’s most of what Java as a language has to offer. I guess I could also go into the fact that checked exceptions are one of the most broken language features ever conceived, but you know that already and you’re probably sick of writing shit like:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Cipher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cipher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AES/CBC/PKCS5Padding&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoSuchAlgorithmException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AES/CBC is documented as always existing.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoSuchPaddingException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PKCS5Padding is documented as always existing&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I sure as hell am.&lt;/p&gt;

&lt;p&gt;But let’s not dwell on Java’s shortcomings in isolation any longer. Let’s take a look at what people really mean when they say other languages are harder to learn: They can do more. I’ll take a simple example that I needed to do this week, which was prepend a single zero-byte to an array. In Java your code is going to look something like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arraycopy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whereas in Scala, an increasingly popular JVM language, it’s going to look more like this:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+:=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yeah, I’m not kidding. Those code fragments are equivalent.&lt;/p&gt;

&lt;p&gt;I know what you’re thinking though. The Scala code looks more cryptic. But much like &lt;code class=&quot;highlighter-rouge&quot;&gt;a += b&lt;/code&gt; expands to &lt;code class=&quot;highlighter-rouge&quot;&gt;a = a + b&lt;/code&gt; in Java, &lt;code class=&quot;highlighter-rouge&quot;&gt;a +:= b&lt;/code&gt; expands to &lt;code class=&quot;highlighter-rouge&quot;&gt;a = a.+:(b)&lt;/code&gt; in Scala, where the part before the &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; is the method name (&lt;code class=&quot;highlighter-rouge&quot;&gt;+:&lt;/code&gt; is a legal method name in Scala). All you have to remember is a universal expansion rule, which is arguably simpler than the localised expansion rule in Java. And you don’t need to refer to the documentation to see which order the parameters for the &lt;code class=&quot;highlighter-rouge&quot;&gt;arraycopy&lt;/code&gt; method come in, or make an off-by-one error by carelessly using the wrong array length (did you spot that?).&lt;/p&gt;

&lt;p&gt;You’re probably thinking that’s a contrived example, so let’s take another one - produce the running total of an array of numbers, which is the kind of thing you might want to do for a receipt or on a summary screen. In Java you’re looking at something like this (with no deliberate errors this time, I promise):&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runningTotals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentTotal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;currentTotal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;runningTotals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentTotal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whereas in Scala it’s rather simpler:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runningTotals&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scanLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But again, it’s &lt;em&gt;cryptic&lt;/em&gt;, right? Well, no, not really. Once you’re able to recognise common Scala idioms and functions you can read this in your head as “Scan the array from the left, start with zero, and make each new value by adding the original value to the accumulated value.”, which is probably just about how you’d describe the solution in English. It certainly reads better than “Create a new array of the same length, start with zero for the current total and the index into the array, while the index into the array is less than the array length, add the value at the current index to the current total and store that in the running totals at the current index, then increment the index into the array.”.&lt;/p&gt;

&lt;p&gt;I know you’re still not convinced yet, so let’s try a different tack. Every Java developer is familiar with the verbosity that came from dealing with resources that need to be closed after use in Java before version 7:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;They were all pretty happy when a little bit of syntactic sugar was eventually introduced in Java 7 which let them achieve the same result with fewer lines of code. Well, I assume they were happy anyway.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In other languages, you don’t need to wait fifteen years for the language designers to get their asses in gear, you can just add the feature yourself. Here’s the same try-with-resources concept expressed in Scala, which is duck-typed to work on anything with a &lt;code class=&quot;highlighter-rouge&quot;&gt;close&lt;/code&gt; method; no need to add an &lt;code class=&quot;highlighter-rouge&quot;&gt;AutoCloseable&lt;/code&gt; interface here:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// we can't call it 'try' as that's a keyword, so we'll go with 'using' in homage to C#
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It can now be used in much the same way as the Java one, and looks reasonably like a built-in language construct:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Plus the really cool thing with this version is that say you want to return something from within the &lt;code class=&quot;highlighter-rouge&quot;&gt;using&lt;/code&gt; block, because this is an an expression rather than a statement, you can just assign the result directly. This is something I’ve &lt;em&gt;often&lt;/em&gt; wanted to do when writing C# over the past decade or so:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstLine&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What’s the big deal though? Java 7 has this language feature built in now so you’re not gaining anything with Scala, right? Well, because the Scala approach is not dependent on a specific language feature you can apply it to scenarios other than just closing resources; for example you could create &lt;code class=&quot;highlighter-rouge&quot;&gt;borrow&lt;/code&gt; helper that borrows resources from a pool and returns them to it at the end, or a &lt;code class=&quot;highlighter-rouge&quot;&gt;cached&lt;/code&gt; helper where you check a cache for the resource and, if it isn’t found, run the block to get it and then add it to the cache. In fact, you can add a helper like this for &lt;em&gt;any&lt;/em&gt; situation where you have ‘before’ and/or ‘after’ actions. And believe me, this is barely scratching the surface of what you can do with higher order functions.&lt;/p&gt;

&lt;p&gt;OK, one last one. Say you want to create a basic immutable ‘property holder’ class style in Java, which is a fairly common requirement, you’re going to need to write something like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the same in Scala?&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well, actually, the Scala version doesn’t have quite the same functionality… The compiler will also generate a &lt;code class=&quot;highlighter-rouge&quot;&gt;toString&lt;/code&gt; method which pretty-prints the values, and compliant &lt;code class=&quot;highlighter-rouge&quot;&gt;equals&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hashCode&lt;/code&gt; methods. So it’s a significantly more functional class in &lt;em&gt;quite&lt;/em&gt; a lot less code. And if you want mutability, just prefix the argument names with &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; and it’ll generate the setters too.&lt;/p&gt;

&lt;p&gt;You can’t even say the Scala version is cryptic this time, either.&lt;/p&gt;

&lt;p&gt;If you’re still reading and you’ve managed to hold off being offended for long enough to actually consider some of the points I’ve made, you’re probably starting to thing that maybe, just &lt;em&gt;maybe&lt;/em&gt;, Java isn’t the language you want to spend the next God-knows-how-many years coding in. Pretty much the same position that hordes of C++ developers found themselves in all the way back in 1996.&lt;/p&gt;

&lt;p&gt;The problem was that not much from C++ was salvageable when they moved to Java. Sure, all the language-agnostic skills such as functional decomposition, object-oriented design and the like were pretty transferable, but knowledge of all the class libraries and frameworks: gone. If you’ve spent a lot of effort learning all the Java libraries and frameworks and build systems and so on, you don’t want to be in the same boat as those C++ guys and get reset back to scratch.&lt;/p&gt;

&lt;p&gt;The thing is, you don’t have to be.&lt;/p&gt;

&lt;p&gt;Virtually everything I’ve picked on in this article has been problems with Java the &lt;em&gt;language&lt;/em&gt;, not Java the &lt;em&gt;platform&lt;/em&gt;. Java as a platform has a lot going for it. The virtual machine is stable, fast and widely supported. The packaging and deployment system makes a fair amount of sense. The frameworks and class libraries are extensive. What if you could retain &lt;em&gt;all&lt;/em&gt; your knowledge of &lt;em&gt;all&lt;/em&gt; of these things, and just switch to a &lt;a href=&quot;http://clojure.org/&quot;&gt;language&lt;/a&gt; &lt;a href=&quot;http://groovy.codehaus.org/&quot;&gt;that&lt;/a&gt; &lt;a href=&quot;http://www.scala-lang.org/&quot;&gt;made&lt;/a&gt; &lt;a href=&quot;http://jruby.org/&quot;&gt;them&lt;/a&gt; &lt;a href=&quot;http://www.jython.org/&quot;&gt;more&lt;/a&gt; &lt;a href=&quot;https://developer.mozilla.org/en/docs/Rhino&quot;&gt;pleasant&lt;/a&gt; to use?&lt;/p&gt;

&lt;p&gt;That’d be pretty cool.&lt;/p&gt;

&lt;p&gt;But which language to choose?&lt;/p&gt;

&lt;p&gt;Well, that’s the billion dollar question.&lt;/p&gt;

&lt;p&gt;As you may have guessed from the code samples above, my best guess is Scala. It’s object-oriented and strongly typed, unlike most other popular JVM languages, which will make Java developers feel right at home. In fact, it’s pretty easy to write Java-like code in Scala, just with fewer lines. The syntax is kind of C-like if you squint. Well, it’s got curly braces. And you can put semi-colons in there if you really want. And although it favours a functional and immutable style, you can mix and match imperative and mutable code as appropriate without feeling like you’re being scolded for it.&lt;/p&gt;

&lt;p&gt;You’re still stuck with generic type erasure and some of the weird side effects that come with it. Nothing can fix that mistake other than an updated bytecode format, and hell isn’t freezing over any time soon. But hey, nothing’s perfect, and Scala still looks pretty compelling.&lt;/p&gt;

&lt;p&gt;However, there are a few things standing in its way.&lt;/p&gt;

&lt;p&gt;The first, and probably the most significant, is you’ve got to read &lt;a href=&quot;http://www.amazon.co.uk/Programming-In-Scala-2nd-Edition/dp/0981531644&quot;&gt;a book&lt;/a&gt; to learn it because some of the syntax and idioms are fairly non-obvious until you know them. And as Steve Yegge frequently points out, most developers are happy to read about frameworks until the cows come home, but ask them to read a book about a new language and they’ll look at you with the same kind of horror as if you’d just asked them to cut off their own arm.&lt;/p&gt;

&lt;p&gt;I’ve always found this an odd stance to take. When you’re working in an industry where there are so many languages used, how can you &lt;em&gt;not&lt;/em&gt; be curious about what they have to offer and why other people might be using them? Even with languages I wouldn’t claim to have any knowledge of, I’ve still probably read a book about them and/or played around with them for a couple of days just to get a bit of a flavour.&lt;/p&gt;

&lt;p&gt;That’s OK though. You’ve read this far, so you’re probably not most developers. Go pick up a copy of that book from somewhere (if you’re a Safari Books Online subscriber it’s available to you right now) and spend a few weeks working through it. I guarantee you’ll start looking at Java in a whole different way, and – even if nothing else – you’ll finally understand that &lt;a href=&quot;http://www.paulgraham.com/avg.html&quot;&gt;Blub paradox&lt;/a&gt; article.&lt;/p&gt;

&lt;p&gt;The second hurdle is the potential impedance mismatch between Scala and the Java-oriented libraries. Although it’s easy to consume Java libraries from Scala, there are quite a number of libraries that assume your code will adhere to certain conventions, and may not function correctly - or at all - if it doesn’t.&lt;/p&gt;

&lt;p&gt;Perhaps the most common one is the ‘Java bean’ convention which requires a parameterless constructor, and all fields to be mutable with accessors named according to a &lt;code class=&quot;highlighter-rouge&quot;&gt;getX&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;setX&lt;/code&gt; convention. Idiomatic Scala code will use immutable objects with a parameterised constructor, and the accessor method naming convention is &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; (getter) and &lt;code class=&quot;highlighter-rouge&quot;&gt;x_=&lt;/code&gt; (setter), which is clearly significantly different, and means that frameworks like Spring, and serialisation libraries like Jackson are probably going to have issues.&lt;/p&gt;

&lt;p&gt;Quite how much of a problem this impedance mismatch will cause I don’t know. But it’s definitely non-zero, and it could be significant, depending on how much you read into the &lt;a href=&quot;https://gist.github.com/anonymous/1406238&quot;&gt;infamous email leaked from Yammer&lt;/a&gt;. It may be significant enough that it’s actually more appropriate to use different frameworks and build systems like Play and SBT which are designed to be more Scala-friendly, reducing the previously hypothesised benefit of platform knowledge transferring directly.&lt;/p&gt;

&lt;p&gt;The final hurdle will be the difficulty of getting Scala accepted - or even investigated - as an implementation language by companies due to FUD. That previously mentioned email seeded a lot of it and and I’m not convinced that the &lt;a href=&quot;http://eng.yammer.com/scala-at-yammer/&quot;&gt;official response&lt;/a&gt;, which attempted to rectify the situation by explaining that all languages are crap and Scala was the least crap for some key systems, did much to help. Many companies will simply write Scala off as ‘too experimental’, ‘too complex’, ‘too different’, ‘too slow’, ‘too risky’, or any combination of the above.&lt;/p&gt;

&lt;p&gt;This will probably be the hardest hurdle of all to overcome, because this decision is typically made by people who haven’t done any development in years (if ever) and are unlikely to be swayed away from ‘safe’ technologies just because it might make the developers more productive. All languages are Turing complete, so how much difference can it make? Why would we move away from trusty Java?&lt;/p&gt;

&lt;p&gt;Good question.&lt;/p&gt;

&lt;p&gt;And I’m not sure I have a good answer.&lt;/p&gt;

&lt;p&gt;Java is an outdated language, but that doesn’t mean you can’t build great systems with it. Most people consider C++ to be pretty outdated for systems building (that was the starting point for this post, if you can remember back that far) but Facebook use it extensively and it doesn’t seem to have held them back too much. And there are some great frameworks that provide a lot of functionality and just use Java as the glue, so when there isn’t a lot of actual code it might not be worth the effort to try and wedge some other language in there.&lt;/p&gt;

&lt;p&gt;However a lot of Java code seems to make extensive use of frameworks to try and compensate for the language deficiencies, and these frameworks often &lt;em&gt;cause&lt;/em&gt; you to write even more complex and/or boilerplate code just to support the framework, meaning your useful code (i.e. the stuff that solves actual business problems) is lost in a mire of support code. Pretty much any framework that has a lot of &lt;code class=&quot;highlighter-rouge&quot;&gt;Factory&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Manager&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Provider&lt;/code&gt; classes, or that requires hundreds of lines of XML configuration, is going to be in this category.&lt;/p&gt;

&lt;p&gt;Take an honest look at your current codebase and see what proportion of it is real business code, and what proportion is either framework support code/configuration or dumb data transfer objects with no real behaviour of their own. If the ratio’s not so good, you might be better off using a more modern language.&lt;/p&gt;</content><author><name>gregbeech</name></author><category term="java" /><category term="languages" /><category term="rants" /><category term="scala" /><summary type="html">Back in the early 1990s Java was conceived as an alternative to C++ which would be portable, garbage collected, and easier to learn, but still retaining a C-like syntax to make programmers feel more comfortable migrating to it. There are a variety of reasons why Java became so popular on launch, marketing not being the least of them, and now it’s one of the most popular languages in the world. Perhaps the most popular, depending on which statistics you believe.</summary></entry><entry><title type="html">An incomplete and probably incorrect guide to HTTP caching</title><link href="http://localhost:4000/2013/02/28/an-incomplete-and-probably-incorrect-guide-to-http-caching/" rel="alternate" type="text/html" title="An incomplete and probably incorrect guide to HTTP caching" /><published>2013-02-28T00:00:00+00:00</published><updated>2013-02-28T00:00:00+00:00</updated><id>http://localhost:4000/2013/02/28/an-incomplete-and-probably-incorrect-guide-to-http-caching</id><content type="html" xml:base="http://localhost:4000/2013/02/28/an-incomplete-and-probably-incorrect-guide-to-http-caching/">&lt;p&gt;This post is an attempt to provide an easier to follow version of the rules laid out in &lt;a href=&quot;http://tools.ietf.org/html/rfc2616&quot;&gt;RFC 2616&lt;/a&gt; §§ 13-14 around HTTP caching and the impact of various HTTP headers on them. Some detail has been simplified and/or omitted to cover only the subset of HTTP typically used by RESTful APIs, as it was research into the blinkbox Web API that led me to write this.&lt;/p&gt;

&lt;p&gt;Due to the nature of the content, this post is fairly long and dry. If you’re not particularly interested in the details then feel free to skip to the &lt;a href=&quot;#examples&quot;&gt;examples&lt;/a&gt; at the end which illustrate the main caching use-cases for APIs.&lt;/p&gt;

&lt;p&gt;I should also note up front that the HTTP caching rules are extremely complex and are spread out through the RFC, which means that it’s possible - probable, even - that there are errors in this post. If you find any, please let me know and I’ll update it.&lt;/p&gt;

&lt;h2 id=&quot;revalidation&quot;&gt;Revalidation&lt;/h2&gt;

&lt;p&gt;Revalidation is where a client or intermediate cache needs to check with the origin server whether the entity has been updated. It might seem an odd place to start, but the cacheability rules depend on it so it’s easier to define first. The rules affecting revalidation are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: no-cache&lt;/code&gt; directive doesn’t prevent caching, but does require revalidation (RFC 2616 § 14.9.1).&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: max-age=0&lt;/code&gt; directive requires revalidation (RFC 2616 § 14.9.4).&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Pragma: no-cache&lt;/code&gt; directive should be treated the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: no-cache&lt;/code&gt; (RFC 2616 § 14.32).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: must-revalidate&lt;/code&gt; directive does not require revalidation (RFC 2616 § 14.9.4)&lt;/p&gt;

&lt;p&gt;The pseudocode implementation of these rules is:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;must_revalidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache_control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no_cache&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache_control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_age&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pragma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no_cache&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;cacheability&quot;&gt;Cacheability&lt;/h2&gt;

&lt;p&gt;The rules affecting cacheability for both private and shared caches are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Only responses to the following HTTP methods are permitted (RFC 2616 § 9):
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; - Defaults to cacheable unless prohibited by another condition&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; - The metadata about an entity may be used to update a previously cached entity.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; - Defaults to non-cacheable unless explicitly allowed by a &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Expires&lt;/code&gt; header.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;It is explicitly forbidden to cache responses to the following methods irrespective of any cache headers they may contain: &lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;OPTIONS&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;TRACE&lt;/code&gt; (RFC 2616 § 9).&lt;/li&gt;
  &lt;li&gt;It is permitted to cache responses with the following status codes: &lt;code class=&quot;highlighter-rouge&quot;&gt;200 OK&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;203 Non-Authoritative Information&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;206 Partial Content&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;300 Multiple Choices&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;301 Moved Permanently&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;410 Gone&lt;/code&gt; (RFC 2616 § 13.4). For simplicity, client-side caches may choose to only cache &lt;code class=&quot;highlighter-rouge&quot;&gt;200 OK&lt;/code&gt; responses.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: no-store&lt;/code&gt; directive disallows any form of caching (RFC 2616 § 14.9.2).&lt;/li&gt;
  &lt;li&gt;If the response must be revalidated then it should have either an &lt;code class=&quot;highlighter-rouge&quot;&gt;ETag&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Last-Modified&lt;/code&gt; header to allow a precondition to be set for the revalidation, otherwise there’s little point in caching the response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Shared caches must also obey the following rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: private&lt;/code&gt; directive is present then the response must not be cached. Note that the HTTP spec does allow this to apply to parts of messages, but it’s a feature I’ve never seen used so am ignoring here.&lt;/li&gt;
  &lt;li&gt;If the &lt;code class=&quot;highlighter-rouge&quot;&gt;Vary: *&lt;/code&gt; directive is present, then the response must not be cached. This rule should, in theory, apply to private caches as well. However, because resources for a specific client which have this directive specified tend to depend on factors such as geo-location which will not change for that client, it may be reasonable for private caches to disregard this directive and cache the response anyway.&lt;/li&gt;
  &lt;li&gt;If the &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&lt;/code&gt; header is present then the response may only be cached if the &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: public&lt;/code&gt; directive is present, i.e. it cannot be inferred that the response is publicly cacheable in absence of a private directive (RFC 2616 § 14.8). If you are using the &lt;code class=&quot;highlighter-rouge&quot;&gt;s-maxage&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;must-revalidate&lt;/code&gt; directives then there are additional rules; we’re not so I haven’t considered them here.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: no-cache&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Pragma: no-cache&lt;/code&gt; directives do not prevent caching (RFC 2616 §§ 14.9.1, 14.32).&lt;/p&gt;

&lt;p&gt;Not all of these rules are typically applicable to clients using RESTful APIs. The pseudocode implementation of a simplified subset of rules typically useful for applications is:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_cacheable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache_control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no_store&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_shared_cache&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache_control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;private&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;star&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authorization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache_control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;public&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;must_revalidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_modified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache_control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache_control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;private&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;freshness-and-expiration&quot;&gt;Freshness and Expiration&lt;/h2&gt;

&lt;h3 id=&quot;response-age&quot;&gt;Response Age&lt;/h3&gt;

&lt;p&gt;The response age algorithm is taken from RFC 2616 § 13.2.3, with the simplification that it is reasonable to assume that the response delay will be negligible and can thus be discarded. This is because in interactive applications a delay of more than a few seconds is unacceptable, and typically cache lifetimes of resources will be in the order of hours. This gives the simplified rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The apparent age is the difference between the current date and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; header.&lt;/li&gt;
  &lt;li&gt;If the &lt;code class=&quot;highlighter-rouge&quot;&gt;Age&lt;/code&gt; header is present, and is greater than the apparent age, then that value is used instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The pseudocode implementation of these rules is:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;freshness-lifetime&quot;&gt;Freshness Lifetime&lt;/h3&gt;

&lt;p&gt;The freshness lifetime algorithm is taken from RFC 2616 § 13.2.4. The rules are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: max-age&lt;/code&gt; directive is present, then it is the freshness lifetime.&lt;/li&gt;
  &lt;li&gt;Otherwise, if the &lt;code class=&quot;highlighter-rouge&quot;&gt;Expires&lt;/code&gt; header is present, then the the freshness lifetime is the difference between it and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; header (note that origin servers are required to send a &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; header).&lt;/li&gt;
  &lt;li&gt;Otherwise, if the &lt;code class=&quot;highlighter-rouge&quot;&gt;Last-Modified&lt;/code&gt; header is present, the lifetime can be estimated as 10% of the time between the current time and the last modified time.&lt;/li&gt;
  &lt;li&gt;Otherwise, the cache should use a default lifetime.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is noted that caches estimating a freshness lifetime of more than 24 hours should attach Warning 113 to the response. To avoid this situation, it seems sensible to limit any estimated lifetime to no more than 24 hours.&lt;/p&gt;

&lt;p&gt;The pseudocode implementation of these rules is:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_freshness_lifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache_control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache_control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_age&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_modified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;estimated_lifetime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_modified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;estimated_lifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;expiration-datetime&quot;&gt;Expiration Date/Time&lt;/h3&gt;

&lt;p&gt;The expiration date/time of a response can be calculated by computing the time-to-live from lifetime and age, and adding to the current date. A response is considered to be expired (aka not fresh) if the current date is greater than or equal to the expiration date. This is a re-stating of the rules in RFC 2616 § 13.2.4 in terms of dates rather than ages, as checking of dates is typically easier when determining whether a response is fresh.&lt;/p&gt;

&lt;p&gt;The pseudocode implementation is:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_expires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lifetime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_freshness_lifetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lifetime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;offline-mode&quot;&gt;Offline Mode&lt;/h3&gt;

&lt;p&gt;Most mobile devices have an explicit offline mode where they do not attempt to connect to the internet (for example, this may be enabled on an aeroplane). When in offline mode it seems reasonable to assume that if the user is attempting to use previously cached data that the rules for history lists (RFC 2616 § 13.13) apply and that the device may display data that is stale to represent the state at the time they were connected.&lt;/p&gt;

&lt;h2 id=&quot;request-preconditions&quot;&gt;Request Preconditions&lt;/h2&gt;

&lt;h3 id=&quot;get&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;If a cache has a response that is stale, or requires revalidation then:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the cached response has a &lt;code class=&quot;highlighter-rouge&quot;&gt;Last-Modified&lt;/code&gt; header, then the refresh request should include an &lt;code class=&quot;highlighter-rouge&quot;&gt;If-Modified-Since&lt;/code&gt; header containing the last modified date (RFC 2616 § 13.3.4).&lt;/li&gt;
  &lt;li&gt;If the cached response has an &lt;code class=&quot;highlighter-rouge&quot;&gt;ETag&lt;/code&gt; header, then the refresh request should include an &lt;code class=&quot;highlighter-rouge&quot;&gt;If-None-Match&lt;/code&gt; header containing the etag (RFC 2616 §§ 13.3.4, 14.26).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;put-post-and-delete&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;When sending request to modify or delete an existing entity (i.e. a request to a URL that already exists) then, then the client should send any strong validators it has:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The request should include an &lt;code class=&quot;highlighter-rouge&quot;&gt;If-Match&lt;/code&gt; header, if:
    &lt;ul&gt;
      &lt;li&gt;The cached response has an &lt;code class=&quot;highlighter-rouge&quot;&gt;ETag&lt;/code&gt; header, and&lt;/li&gt;
      &lt;li&gt;The etag is not weak, i.e. the etag does not have the prefix &lt;code class=&quot;highlighter-rouge&quot;&gt;W/&lt;/code&gt; (RFC 2616 §§ 13.3.3, 13.3.4, 14.24).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The request should include an &lt;code class=&quot;highlighter-rouge&quot;&gt;If-Unmodified-Since&lt;/code&gt; header containing the last modified date, if:
    &lt;ul&gt;
      &lt;li&gt;The cached response has a &lt;code class=&quot;highlighter-rouge&quot;&gt;Last-Modified&lt;/code&gt; header, and&lt;/li&gt;
      &lt;li&gt;The cached response has &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; value, and&lt;/li&gt;
      &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Last-Modified&lt;/code&gt; value is at least 60 seconds before the &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt; value (RFC 2616 §§ 13.3.3, 13.3.4).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The pseudocode implementation of these rules is:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_if_match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cached_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cached_response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cached_response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;starts_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;W/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cached_response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etag&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_if_unmodified_since&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cached_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cached_response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_modified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cached_response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cached_response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cached_response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_modified&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;60.0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cached_response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_modified&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;response-storage-and-invalidation&quot;&gt;Response Storage and Invalidation&lt;/h2&gt;

&lt;p&gt;The rules to determine whether an update is required on receiving a response are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the request method is not &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; (i.e. a method that may update the server) then the cache should be updated (RFC 2616 § 13.10). Although not explicitly stated, it can be inferred that this should be done on receiving the response rather than on sending the request, because the specification mentions the &lt;code class=&quot;highlighter-rouge&quot;&gt;Location&lt;/code&gt; response header. Similarly, although not explicitly stated, it can be reasonably assumed that the cache does not need to be updated on error responses.
    &lt;ul&gt;
      &lt;li&gt;If the response to a method that contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;Location&lt;/code&gt; and/or &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Location&lt;/code&gt; header, then the cache should be invalidated for those locations as well, if the URI is either relative or has the same host as the request URI (RFC 2616 § 13.10).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If a new cacheable response is received then the cache may be updated, although it is not required. For simplicity, it is reasonable to assume that we should update the cache if we receive a newer version (RFC 2616 § 13.10).
    &lt;ul&gt;
      &lt;li&gt;If the response contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Location&lt;/code&gt; header, then that is considered only a statement of the location of the content at the time of the response, and the cache cannot assume that the response can be used to fulfil a request to the URI specified in the header (RFC 2616 § 13.10).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although not explicitly stated, it would also be reasonable to assume that the cache should be updated if a status code is received that indicates the entity does not exist.&lt;/p&gt;

&lt;p&gt;The pseudocode implementation of these rules is:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;299&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;should_invalidate_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;HEAD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should_invalidate_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content_location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content_location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_cacheable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;expires&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_expires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;origin-server-recommendations&quot;&gt;Origin Server Recommendations&lt;/h2&gt;

&lt;p&gt;There are some issues with the HTTP protocol that can make cache correctness more difficult on clients, and more prone to incorrect interpretation by intermediate caches. This set of recommendations should be implemented by origin servers to ensure that the documented client logic works as expected.&lt;/p&gt;

&lt;h3 id=&quot;revalidation-and-offline-use&quot;&gt;Revalidation and Offline Use&lt;/h3&gt;

&lt;p&gt;To ensure correct behaviour of servers regarding revalidation and use of content in offline mode, origin servers should use the following cache control directives.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Content that should never be cached or used offline: &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: no-store&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Content that may be cached, but which must be revalidated and so cannot be used offline: &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: no-cache&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Content that may be cached, which should be revalidated, but may be used in offline mode: &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: max-age=0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Content that may be cached, which does not need to be revalidated, and may be used in offline mode: &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: max-age=seconds&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;user-specific-data&quot;&gt;User-Specific Data&lt;/h3&gt;

&lt;p&gt;Private (i.e. user-specific) data is indicated in HTTP/1.1 by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: private&lt;/code&gt; directive. However, HTTP/1.0 caches cannot be relied on to obey this directive. As such, for private cacheable data, origin servers should take advantage of the response age precedence rules by specifying the expiration of the data using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Cache-Control: max-age&lt;/code&gt; directive, and setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;Expires&lt;/code&gt;header to a date no later than the Date header (RFC 2616 § 14.9.3).&lt;/p&gt;

&lt;h3 id=&quot;put-response-ambiguity&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; Response Ambiguity&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://trac.tools.ietf.org/wg/httpbis/trac/ticket/22&quot;&gt;RFC 2616 issue 26&lt;/a&gt; indicates it is not clear whether the metadata in response to a &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt; request applies to that response, or to the response that would be returned upon a subsequent &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;. This issue would also apply to a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; request that returns a response body. As such, it is highly recommended origin servers ensure that either:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They return a &lt;code class=&quot;highlighter-rouge&quot;&gt;200 OK&lt;/code&gt; status code (typical for synchronous updates to existing entities) and ensure that the response is equivalent to that which would be retrieved by a subsequent &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; thus rendering the ambiguity inconsequential.&lt;/li&gt;
  &lt;li&gt;They return a &lt;code class=&quot;highlighter-rouge&quot;&gt;201 Created&lt;/code&gt; status code (typical for creation of new entities) which means the response is not permitted to be cached.&lt;/li&gt;
  &lt;li&gt;They return a &lt;code class=&quot;highlighter-rouge&quot;&gt;202 Accepted&lt;/code&gt; status code (typical for asynchronous updates to existing entities) which means the response is not permitted to be cached.&lt;/li&gt;
  &lt;li&gt;They return a &lt;code class=&quot;highlighter-rouge&quot;&gt;204 No Content&lt;/code&gt; status code (typical for synchronous updates to existing entities) which means there is no body to be cached.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;etags&quot;&gt;ETags&lt;/h3&gt;

&lt;p&gt;Weak etag comparison functions are mildly confusing, and it is not permitted to send a weak etag on anything other than full-body &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; requests (RFC 2616 § 13.3.3). The likely reason for this is that a weak etag does not imply exact equality, only semantic equivalence, and using a weak etag as a precondition would not necessarily prevent the lost edits problem. For this reason, it is highly recommended that origin servers use only strong etags.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;p&gt;The following examples illustrate the five main caching use-cases that are expected to be encountered in a RESTful API. The &lt;code class=&quot;highlighter-rouge&quot;&gt;ETag&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Last-Modified&lt;/code&gt; headers are optional, but should be provided where possible. Note that these header sets are incomplete, and show only the headers pertaining to caching.&lt;/p&gt;

&lt;p&gt;A response that should never be cached:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cache-Control: no-store
Date: {now}
Expires: {now}
Pragma: no-cache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A response that may be cached, but must be revalidated before use and cannot be used stale:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cache-Control: no-cache
Date: {now}
Expires: {now}
ETag: {etag}
Last-Modified: {modified-date}
Pragma: no-cache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A response that may be cached, which should be revalidated before use, but which may be used stale:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cache-Control: [public|private], max-age=0
Date: {now}
Expires: {now}
ETag: {etag}
Last-Modified: {modified-date}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A response that may be cached publicly, which does not need revalidation before use (until the specified expiration):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cache-Control: public, max-age={seconds}
Date: {now}
Expires: {now + seconds}
ETag: {etag}
Last-Modified: {modified-date}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A response that may be cached privately, which does not need revalidation before use (until the specified expiration):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cache-Control: private, max-age={seconds}
Date: {now}
Expires: {now}
ETag: {etag}
Last-Modified: {modified-date}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>gregbeech</name></author><category term="caching" /><category term="http" /><category term="rest" /><summary type="html">This post is an attempt to provide an easier to follow version of the rules laid out in RFC 2616 §§ 13-14 around HTTP caching and the impact of various HTTP headers on them. Some detail has been simplified and/or omitted to cover only the subset of HTTP typically used by RESTful APIs, as it was research into the blinkbox Web API that led me to write this.</summary></entry></feed>